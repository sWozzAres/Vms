// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Vms.Domain.Infrastructure;

#nullable disable

namespace Vms.Domain.Infrastructure.VmsDb
{
    [DbContext(typeof(VmsDbContext))]
    [Migration("20230820151914_Initial11")]
    partial class Initial11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Utopia.Api.Domain.System.ActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsNote")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.ActivityNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ActivityLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentKey")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("DocumentKind")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogId");

                    b.HasIndex("UserId", "EntryDate")
                        .IsDescending(false, true);

                    b.ToTable("ActivityNotifications", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Emails", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.Follower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DocumentId", "UserId")
                        .IsUnique();

                    b.ToTable("Followers", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.Login", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.RecentView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DocumentId", "UserId")
                        .IsUnique();

                    b.ToTable("RecentViews", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.TaskLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TaskLogs", "System", t =>
                        {
                            t.HasCheckConstraint("Log record should be formatted as JSON", "ISJSON(log)=1");
                        });
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users", "System");
                });

            modelBuilder.Entity("Vms.Domain.Core.Company", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Code");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Vms.Domain.Core.Customer", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Vms.Domain.Core.CustomerNetwork", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("NetworkCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)");

                    b.HasKey("CompanyCode", "NetworkCode", "CustomerCode");

                    b.HasIndex("CompanyCode", "CustomerCode");

                    b.ToTable("CustomerNetworks");
                });

            modelBuilder.Entity("Vms.Domain.Core.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Geometry>("HomeLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Salutation")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasAlternateKey("CompanyCode", "EmailAddress");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Vms.Domain.Core.DriverVehicle", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyCode", "DriverId", "VehicleId");

                    b.HasIndex("CompanyCode", "VehicleId");

                    b.ToTable("DriverVehicles");
                });

            modelBuilder.Entity("Vms.Domain.Core.Fleet", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("Vms.Domain.Core.FleetNetwork", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("FleetCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("NetworkCode")
                        .HasColumnType("nchar(10)");

                    b.HasKey("CompanyCode", "FleetCode", "NetworkCode");

                    b.HasIndex("CompanyCode", "NetworkCode");

                    b.ToTable("FleetNetworks");
                });

            modelBuilder.Entity("Vms.Domain.Core.Network", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Vms.Domain.Core.NetworkSupplier", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("NetworkCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("nchar(8)");

                    b.HasKey("CompanyCode", "NetworkCode", "SupplierCode");

                    b.HasIndex("SupplierCode");

                    b.ToTable("NetworkSuppliers", (string)null);
                });

            modelBuilder.Entity("Vms.Domain.Core.RescheduleReason", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("RescheduleReasons");
                });

            modelBuilder.Entity("Vms.Domain.Core.Supplier", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<bool>("IsIndependent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Vms.Domain.Core.SupplierRefusal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("ServiceBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnType("nchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceBookingId");

                    b.HasIndex("SupplierCode");

                    b.HasIndex("CompanyCode", "Code");

                    b.ToTable("SupplierRefusals");
                });

            modelBuilder.Entity("Vms.Domain.Core.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChassisNumber")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("nchar(10)");

                    b.Property<DateOnly>("DateFirstRegistered")
                        .HasColumnType("date");

                    b.Property<string>("FleetCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode", "CustomerCode");

                    b.HasIndex("CompanyCode", "FleetCode");

                    b.HasIndex("Make", "Model");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Vms.Domain.Core.VehicleMake", b =>
                {
                    b.Property<string>("Make")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Make");

                    b.ToTable("VehicleMakes");
                });

            modelBuilder.Entity("Vms.Domain.Core.VehicleModel", b =>
                {
                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Make", "Model")
                        .HasName("PK_Model");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ConfirmBookedRefusalReason", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("ConfirmBookedRefusalReasons");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.MotEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<DateOnly>("Due")
                        .HasColumnType("date");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ServiceBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId", "IsCurrent")
                        .IsUnique()
                        .HasFilter("IsCurrent = 1");

                    b.HasIndex("CompanyCode", "VehicleId", "ServiceBookingId")
                        .IsUnique()
                        .HasFilter("[ServiceBookingId] IS NOT NULL");

                    b.ToTable("MotEvents", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MotEventsHistory");
                                ttb
                                    .HasPeriodStart("ValidFrom")
                                    .HasColumnName("ValidFrom");
                                ttb
                                    .HasPeriodEnd("ValidTo")
                                    .HasColumnName("ValidTo");
                            }));
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.NonArrivalReason", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("NonArrivalReasons");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.NotCompleteReason", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("NotCompleteReasons", (string)null);
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.RefusalReason", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CompanyCode", "Code");

                    b.ToTable("RefusalReasons");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("BookedDate")
                        .HasColumnType("date");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EstimatedCompletion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MotEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("PreferredDate1")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PreferredDate2")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PreferredDate3")
                        .HasColumnType("date");

                    b.Property<string>("Ref")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RescheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceLevel")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("nchar(8)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("Ref")
                        .IsUnique()
                        .HasDatabaseName("UQ_ServiceBooking_Ref");

                    b.HasIndex("SupplierCode");

                    b.ToTable("ServiceBookings");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceBookingLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Granted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceBookingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ServiceBookingLocks");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ServiceBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId", "IsCurrent")
                        .IsUnique()
                        .HasFilter("IsCurrent = 1");

                    b.HasIndex("CompanyCode", "VehicleId", "ServiceBookingId")
                        .IsUnique()
                        .HasFilter("[ServiceBookingId] IS NOT NULL");

                    b.ToTable("ServiceEvents", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("ServiceEventsHistory");
                                ttb
                                    .HasPeriodStart("ValidFrom")
                                    .HasColumnName("ValidFrom");
                                ttb
                                    .HasPeriodEnd("ValidTo")
                                    .HasColumnName("ValidTo");
                            }));
                });

            modelBuilder.Entity("Vms.Domain.System.EntityTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("EntityKind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EntityKey", "EntityKind")
                        .IsUnique();

                    b.HasIndex("CompanyCode", "Id", "EntityKind")
                        .IsUnique()
                        .HasFilter("[CompanyCode] IS NOT NULL");

                    b.ToTable("EntityTags", "System");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.ActivityLog", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.ActivityNotification", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.ActivityLog", "ActivityLog")
                        .WithMany()
                        .HasForeignKey("ActivityLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityLog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.Follower", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.Login", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.RecentView", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utopia.Api.Domain.System.TaskLog", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vms.Domain.Core.Customer", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.Core.CustomerNetwork", b =>
                {
                    b.HasOne("Vms.Domain.Core.Customer", "Customer")
                        .WithMany("CustomerNetworks")
                        .HasForeignKey("CompanyCode", "CustomerCode")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNetworks_Customers");

                    b.HasOne("Vms.Domain.Core.Network", "Network")
                        .WithMany("CustomerNetworks")
                        .HasForeignKey("CompanyCode", "NetworkCode")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNetworks_Networks");

                    b.Navigation("Customer");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Vms.Domain.Core.Driver", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_Drivers_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.Core.DriverVehicle", b =>
                {
                    b.HasOne("Vms.Domain.Core.Driver", "Driver")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("CompanyCode", "DriverId")
                        .HasPrincipalKey("CompanyCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DriverVehicles_Drivers");

                    b.HasOne("Vms.Domain.Core.Vehicle", "Vehicle")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("CompanyCode", "VehicleId")
                        .HasPrincipalKey("CompanyCode", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_DriverVehicles_Vehicles");

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vms.Domain.Core.Fleet", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("Fleets")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_Fleets_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.Core.FleetNetwork", b =>
                {
                    b.HasOne("Vms.Domain.Core.Fleet", "Fleet")
                        .WithMany("FleetNetworks")
                        .HasForeignKey("CompanyCode", "FleetCode")
                        .IsRequired()
                        .HasConstraintName("FK_FleetNetworks_Fleets");

                    b.HasOne("Vms.Domain.Core.Network", "Network")
                        .WithMany("FleetNetworks")
                        .HasForeignKey("CompanyCode", "NetworkCode")
                        .IsRequired()
                        .HasConstraintName("FK_FleetNetworks_Networks");

                    b.Navigation("Fleet");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Vms.Domain.Core.Network", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("Networks")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_Networks_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.Core.NetworkSupplier", b =>
                {
                    b.HasOne("Vms.Domain.Core.Supplier", "Supplier")
                        .WithMany("NetworkSuppliers")
                        .HasForeignKey("SupplierCode")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkSuppliers_Suppliers");

                    b.HasOne("Vms.Domain.Core.Network", "Network")
                        .WithMany("NetworkSuppliers")
                        .HasForeignKey("CompanyCode", "NetworkCode")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkSuppliers_Networks");

                    b.Navigation("Network");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Vms.Domain.Core.RescheduleReason", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("RescheduleReasons")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_RescheduleReasons_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.Core.Supplier", b =>
                {
                    b.OwnsOne("Vms.Domain.Common.Address", "Address", b1 =>
                        {
                            b1.Property<string>("SupplierCode")
                                .HasColumnType("nchar(8)");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<Geometry>("Location")
                                .IsRequired()
                                .HasColumnType("geography");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Town")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("SupplierCode");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierCode");
                        });

                    b.OwnsMany("Vms.Domain.Core.SupplierFranchise", "Franchises", b1 =>
                        {
                            b1.Property<string>("SupplierCode")
                                .HasColumnType("nchar(8)");

                            b1.Property<string>("Franchise")
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("SupplierCode", "Franchise");

                            b1.HasIndex("Franchise");

                            b1.ToTable("SupplierFranchises", (string)null);

                            b1.HasOne("Vms.Domain.Core.VehicleMake", "Make")
                                .WithMany()
                                .HasForeignKey("Franchise")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner("Supplier")
                                .HasForeignKey("SupplierCode");

                            b1.Navigation("Make");

                            b1.Navigation("Supplier");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Franchises");
                });

            modelBuilder.Entity("Vms.Domain.Core.SupplierRefusal", b =>
                {
                    b.HasOne("Vms.Domain.ServiceBookingProcess.ServiceBooking", "ServiceBooking")
                        .WithMany()
                        .HasForeignKey("ServiceBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vms.Domain.Core.Supplier", "Supplier")
                        .WithMany("ServiceBookingRefusals")
                        .HasForeignKey("SupplierCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vms.Domain.ServiceBookingProcess.RefusalReason", "RefusalReason")
                        .WithMany()
                        .HasForeignKey("CompanyCode", "Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefusalReason");

                    b.Navigation("ServiceBooking");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Vms.Domain.Core.Vehicle", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Companies");

                    b.HasOne("Vms.Domain.Core.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyCode", "CustomerCode")
                        .HasConstraintName("FK_Vehicles_Customers");

                    b.HasOne("Vms.Domain.Core.Fleet", "Fleet")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyCode", "FleetCode")
                        .HasConstraintName("FK_Vehicles_Fleets");

                    b.HasOne("Vms.Domain.Core.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("Make", "Model")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_VehicleModels");

                    b.OwnsOne("Vms.Domain.Common.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<Geometry>("Location")
                                .IsRequired()
                                .HasColumnType("geography");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Town")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.OwnsOne("Vms.Domain.Core.VehicleVrm", "VehicleVrm", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("ValidFrom")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("ValidFrom");

                            b1.Property<DateTime>("ValidTo")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("ValidTo");

                            b1.Property<string>("Vrm")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.HasKey("VehicleId");

                            b1.ToTable("VehicleVrms", (string)null);

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                    {
                                        ttb.UseHistoryTable("VehicleVrmsHistory");
                                        ttb
                                            .HasPeriodStart("ValidFrom")
                                            .HasColumnName("ValidFrom");
                                        ttb
                                            .HasPeriodEnd("ValidTo")
                                            .HasColumnName("ValidTo");
                                    }));

                            b1.WithOwner("Vehicle")
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("FK_Vehicles_VehicleVrms");

                            b1.Navigation("Vehicle");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Fleet");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleVrm")
                        .IsRequired();
                });

            modelBuilder.Entity("Vms.Domain.Core.VehicleModel", b =>
                {
                    b.HasOne("Vms.Domain.Core.VehicleMake", "VehicleMake")
                        .WithMany("VehicleModels")
                        .HasForeignKey("Make")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleMake");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ConfirmBookedRefusalReason", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("ConfirmBookedRefusalReasons")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_ConfirmBookedRefusalReasons_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.MotEvent", b =>
                {
                    b.HasOne("Vms.Domain.Core.Vehicle", "Vehicle")
                        .WithMany("MotEvents")
                        .HasForeignKey("CompanyCode", "VehicleId")
                        .HasPrincipalKey("CompanyCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vms.Domain.ServiceBookingProcess.ServiceBooking", "ServiceBooking")
                        .WithOne("MotEvent")
                        .HasForeignKey("Vms.Domain.ServiceBookingProcess.MotEvent", "CompanyCode", "VehicleId", "ServiceBookingId")
                        .HasPrincipalKey("Vms.Domain.ServiceBookingProcess.ServiceBooking", "CompanyCode", "VehicleId", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ServiceBooking");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.NonArrivalReason", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("NonArrivalReasons")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_NonArrivalReasons_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.NotCompleteReason", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("NotCompleteReasons")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_NotCompleteReasons_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.RefusalReason", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", "Company")
                        .WithMany("RefusalReasons")
                        .HasForeignKey("CompanyCode")
                        .IsRequired()
                        .HasConstraintName("FK_RefusalReasons_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceBooking", b =>
                {
                    b.HasOne("Utopia.Api.Domain.System.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Utopia.Api.Domain.System.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utopia.Api.Domain.System.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vms.Domain.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierCode");

                    b.HasOne("Vms.Domain.Core.Vehicle", "Vehicle")
                        .WithMany("ServiceBookings")
                        .HasForeignKey("CompanyCode", "VehicleId")
                        .HasPrincipalKey("CompanyCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceBookings_Vehicles");

                    b.OwnsOne("Vms.Domain.ServiceBookingProcess.ServiceBookingContact", "Contact", b1 =>
                        {
                            b1.Property<Guid>("ServiceBookingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EmailAddress")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("MobileNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("Name")
                                .HasMaxLength(41)
                                .HasColumnType("nvarchar(41)");

                            b1.Property<DateTime>("ValidFrom")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("ValidFrom");

                            b1.Property<DateTime>("ValidTo")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("ValidTo");

                            b1.HasKey("ServiceBookingId");

                            b1.ToTable("ServiceBookingContacts", (string)null);

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                    {
                                        ttb.UseHistoryTable("ServiceBookingContactsHistory");
                                        ttb
                                            .HasPeriodStart("ValidFrom")
                                            .HasColumnName("ValidFrom");
                                        ttb
                                            .HasPeriodEnd("ValidTo")
                                            .HasColumnName("ValidTo");
                                    }));

                            b1.WithOwner("ServiceBooking")
                                .HasForeignKey("ServiceBookingId")
                                .HasConstraintName("FK_ServiceBookings_ServiceBookingContacts");

                            b1.Navigation("ServiceBooking");
                        });

                    b.OwnsOne("Vms.Domain.ServiceBookingProcess.ServiceBookingDriver", "Driver", b1 =>
                        {
                            b1.Property<Guid>("ServiceBookingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EmailAddress")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("MobileNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("Name")
                                .HasMaxLength(41)
                                .HasColumnType("nvarchar(41)");

                            b1.Property<DateTime>("ValidFrom")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("ValidFrom");

                            b1.Property<DateTime>("ValidTo")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("ValidTo");

                            b1.HasKey("ServiceBookingId");

                            b1.ToTable("ServiceBookingDrivers", (string)null);

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                    {
                                        ttb.UseHistoryTable("ServiceBookingDriversHistory");
                                        ttb
                                            .HasPeriodStart("ValidFrom")
                                            .HasColumnName("ValidFrom");
                                        ttb
                                            .HasPeriodEnd("ValidTo")
                                            .HasColumnName("ValidTo");
                                    }));

                            b1.WithOwner("ServiceBooking")
                                .HasForeignKey("ServiceBookingId")
                                .HasConstraintName("FK_ServiceBookings_ServiceBookingDrivers");

                            b1.Navigation("ServiceBooking");
                        });

                    b.Navigation("AssignedTo");

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Supplier");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceBookingLock", b =>
                {
                    b.HasOne("Vms.Domain.ServiceBookingProcess.ServiceBooking", "ServiceBooking")
                        .WithOne("Lock")
                        .HasForeignKey("Vms.Domain.ServiceBookingProcess.ServiceBookingLock", "ServiceBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utopia.Api.Domain.System.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceBooking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceEvent", b =>
                {
                    b.HasOne("Vms.Domain.Core.Vehicle", "Vehicle")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("CompanyCode", "VehicleId")
                        .HasPrincipalKey("CompanyCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vms.Domain.ServiceBookingProcess.ServiceBooking", "ServiceBooking")
                        .WithOne("ServiceEvent")
                        .HasForeignKey("Vms.Domain.ServiceBookingProcess.ServiceEvent", "CompanyCode", "VehicleId", "ServiceBookingId")
                        .HasPrincipalKey("Vms.Domain.ServiceBookingProcess.ServiceBooking", "CompanyCode", "VehicleId", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ServiceBooking");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vms.Domain.System.EntityTag", b =>
                {
                    b.HasOne("Vms.Domain.Core.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyCode");
                });

            modelBuilder.Entity("Vms.Domain.Core.Company", b =>
                {
                    b.Navigation("ConfirmBookedRefusalReasons");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Fleets");

                    b.Navigation("Networks");

                    b.Navigation("NonArrivalReasons");

                    b.Navigation("NotCompleteReasons");

                    b.Navigation("RefusalReasons");

                    b.Navigation("RescheduleReasons");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vms.Domain.Core.Customer", b =>
                {
                    b.Navigation("CustomerNetworks");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vms.Domain.Core.Driver", b =>
                {
                    b.Navigation("DriverVehicles");
                });

            modelBuilder.Entity("Vms.Domain.Core.Fleet", b =>
                {
                    b.Navigation("FleetNetworks");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vms.Domain.Core.Network", b =>
                {
                    b.Navigation("CustomerNetworks");

                    b.Navigation("FleetNetworks");

                    b.Navigation("NetworkSuppliers");
                });

            modelBuilder.Entity("Vms.Domain.Core.Supplier", b =>
                {
                    b.Navigation("NetworkSuppliers");

                    b.Navigation("ServiceBookingRefusals");
                });

            modelBuilder.Entity("Vms.Domain.Core.Vehicle", b =>
                {
                    b.Navigation("DriverVehicles");

                    b.Navigation("MotEvents");

                    b.Navigation("ServiceBookings");

                    b.Navigation("ServiceEvents");
                });

            modelBuilder.Entity("Vms.Domain.Core.VehicleMake", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("Vms.Domain.Core.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vms.Domain.ServiceBookingProcess.ServiceBooking", b =>
                {
                    b.Navigation("Lock");

                    b.Navigation("MotEvent");

                    b.Navigation("ServiceEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
