// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Vms.Data.Models;

public partial class Vms_TestContext : DbContext
{
    public Vms_TestContext(DbContextOptions<Vms_TestContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Company> Company { get; set; }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<CustomerNetwork> CustomerNetwork { get; set; }

    public virtual DbSet<Driver> Driver { get; set; }

    public virtual DbSet<DriverVehicles> DriverVehicles { get; set; }

    public virtual DbSet<Fleet> Fleet { get; set; }

    public virtual DbSet<FleetNetwork> FleetNetwork { get; set; }

    public virtual DbSet<Network> Network { get; set; }

    public virtual DbSet<ServiceBooking> ServiceBooking { get; set; }

    public virtual DbSet<ServiceBookingSupplier> ServiceBookingSupplier { get; set; }

    public virtual DbSet<Supplier> Supplier { get; set; }

    public virtual DbSet<Vehicle> Vehicle { get; set; }

    public virtual DbSet<VehicleMake> VehicleMake { get; set; }

    public virtual DbSet<VehicleModel> VehicleModel { get; set; }

    public virtual DbSet<VehicleMot> VehicleMot { get; set; }

    public virtual DbSet<VehicleVrm> VehicleVrm { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.Code });

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.Customer)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_Company");
        });

        modelBuilder.Entity<CustomerNetwork>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.NetworkCode, e.CustomerCode });

            entity.HasIndex(e => new { e.CompanyCode, e.CustomerCode }, "IX_CustomerNetwork_CompanyCode_CustomerCode");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.NetworkCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.C).WithMany(p => p.CustomerNetwork)
                .HasForeignKey(d => new { d.CompanyCode, d.CustomerCode })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerNetwork_Customer");

            entity.HasOne(d => d.Network).WithMany(p => p.CustomerNetwork)
                .HasForeignKey(d => new { d.CompanyCode, d.NetworkCode })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerNetwork_Network");
        });

        modelBuilder.Entity<Driver>(entity =>
        {
            entity.HasKey(e => e.EmailAddress).HasName("PK_Driver_1");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MiddleNames)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MobileNumber)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Salutation)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DriverVehicles>(entity =>
        {
            entity.HasKey(e => e.EmailAddress);

            entity.HasIndex(e => e.VehicleId, "IX_DriverVehicles_VehicleId");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.EmailAddressNavigation).WithOne(p => p.DriverVehicles)
                .HasForeignKey<DriverVehicles>(d => d.EmailAddress)
                .HasConstraintName("FK_DriverVehicles_Driver");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.DriverVehicles)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DriverVehicles_Vehicle");
        });

        modelBuilder.Entity<Fleet>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.Code });

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.Fleet)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fleet_Company");
        });

        modelBuilder.Entity<FleetNetwork>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.FleetCode, e.NetworkCode });

            entity.HasIndex(e => new { e.CompanyCode, e.NetworkCode }, "IX_FleetNetwork_CompanyCode_NetworkCode");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FleetCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.NetworkCode)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.Fleet).WithMany(p => p.FleetNetwork)
                .HasForeignKey(d => new { d.CompanyCode, d.FleetCode })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FleetNetwork_Fleet");

            entity.HasOne(d => d.Network).WithMany(p => p.FleetNetwork)
                .HasForeignKey(d => new { d.CompanyCode, d.NetworkCode })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FleetNetwork_Network");
        });

        modelBuilder.Entity<Network>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.Code });

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.Network)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Network_Company");

            entity.HasMany(d => d.SupplierCode).WithMany(p => p.Network)
                .UsingEntity<Dictionary<string, object>>(
                    "NetworkSupplier",
                    r => r.HasOne<Supplier>().WithMany()
                        .HasForeignKey("SupplierCode")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_NetworkSupplier_Supplier"),
                    l => l.HasOne<Network>().WithMany()
                        .HasForeignKey("CompanyCode", "NetworkCode")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_NetworkSupplier_Network"),
                    j =>
                    {
                        j.HasKey("CompanyCode", "NetworkCode", "SupplierCode");
                        j.HasIndex(new[] { "SupplierCode" }, "IX_NetworkSupplier_SupplierCode");
                        j.IndexerProperty<string>("CompanyCode")
                            .HasMaxLength(10)
                            .IsFixedLength();
                        j.IndexerProperty<string>("NetworkCode")
                            .HasMaxLength(10)
                            .IsFixedLength();
                        j.IndexerProperty<string>("SupplierCode")
                            .HasMaxLength(8)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<ServiceBooking>(entity =>
        {
            entity.HasIndex(e => e.VehicleId, "IX_ServiceBooking_VehicleId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Vehicle).WithMany(p => p.ServiceBooking).HasForeignKey(d => d.VehicleId);
        });

        modelBuilder.Entity<ServiceBookingSupplier>(entity =>
        {
            entity.HasKey(e => e.ServiceBookingId);

            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("ServiceBookingSupplierHistory", "dbo");
                        ttb
                            .HasPeriodStart("ValidFrom")
                            .HasColumnName("ValidFrom");
                        ttb
                            .HasPeriodEnd("ValidTo")
                            .HasColumnName("ValidTo");
                    }));

            entity.HasIndex(e => e.SupplierCode, "IX_ServiceBookingSupplier_SupplierCode");

            entity.Property(e => e.ServiceBookingId).ValueGeneratedNever();
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(8)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceBooking).WithOne(p => p.ServiceBookingSupplier).HasForeignKey<ServiceBookingSupplier>(d => d.ServiceBookingId);

            entity.HasOne(d => d.SupplierCodeNavigation).WithMany(p => p.ServiceBookingSupplier).HasForeignKey(d => d.SupplierCode);
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.Property(e => e.Code)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.AddressLocality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_Locality");
            entity.Property(e => e.AddressLocation).HasColumnName("Address_Location");
            entity.Property(e => e.AddressPostcode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Address_Postcode");
            entity.Property(e => e.AddressStreet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_Street");
            entity.Property(e => e.AddressTown)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_Town");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Franchise).WithMany(p => p.SupplierCode)
                .UsingEntity<Dictionary<string, object>>(
                    "SupplierFranchise",
                    r => r.HasOne<VehicleMake>().WithMany().HasForeignKey("Franchise"),
                    l => l.HasOne<Supplier>().WithMany().HasForeignKey("SupplierCode"),
                    j =>
                    {
                        j.HasKey("SupplierCode", "Franchise");
                        j.HasIndex(new[] { "Franchise" }, "IX_SupplierFranchise_Franchise");
                        j.IndexerProperty<string>("SupplierCode")
                            .HasMaxLength(8)
                            .IsUnicode(false);
                        j.IndexerProperty<string>("Franchise")
                            .HasMaxLength(30)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasIndex(e => new { e.CompanyCode, e.CustomerCode }, "IX_Vehicle_CompanyCode_CustomerCode");

            entity.HasIndex(e => new { e.CompanyCode, e.FleetCode }, "IX_Vehicle_CompanyCode_FleetCode");

            entity.HasIndex(e => new { e.Make, e.Model }, "IX_Vehicle_Make_Model");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressLocality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_Locality");
            entity.Property(e => e.AddressLocation).HasColumnName("Address_Location");
            entity.Property(e => e.AddressPostcode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Address_Postcode");
            entity.Property(e => e.AddressStreet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_Street");
            entity.Property(e => e.AddressTown)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_Town");
            entity.Property(e => e.ChassisNumber)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FleetCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Make)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehicle_Company");

            entity.HasOne(d => d.C).WithMany(p => p.Vehicle)
                .HasForeignKey(d => new { d.CompanyCode, d.CustomerCode })
                .HasConstraintName("FK_Vehicle_Customer");

            entity.HasOne(d => d.Fleet).WithMany(p => p.Vehicle)
                .HasForeignKey(d => new { d.CompanyCode, d.FleetCode })
                .HasConstraintName("FK_Vehicle_Fleet");

            entity.HasOne(d => d.M).WithMany(p => p.Vehicle)
                .HasForeignKey(d => new { d.Make, d.Model })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehicle_VehicleModel");
        });

        modelBuilder.Entity<VehicleMake>(entity =>
        {
            entity.HasKey(e => e.Make).HasName("PK_Make");

            entity.Property(e => e.Make)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VehicleModel>(entity =>
        {
            entity.HasKey(e => new { e.Make, e.Model }).HasName("PK_Model");

            entity.Property(e => e.Make)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.MakeNavigation).WithMany(p => p.VehicleModel)
                .HasForeignKey(d => d.Make)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<VehicleMot>(entity =>
        {
            entity.HasKey(e => e.VehicleId);

            entity.Property(e => e.VehicleId).ValueGeneratedNever();

            entity.HasOne(d => d.Vehicle).WithOne(p => p.VehicleMot)
                .HasForeignKey<VehicleMot>(d => d.VehicleId)
                .HasConstraintName("FK_Vehicle_VehicleMot");
        });

        modelBuilder.Entity<VehicleVrm>(entity =>
        {
            entity.HasKey(e => e.VehicleId);

            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("VehicleVrmHistory", "dbo");
                        ttb
                            .HasPeriodStart("ValidFrom")
                            .HasColumnName("ValidFrom");
                        ttb
                            .HasPeriodEnd("ValidTo")
                            .HasColumnName("ValidTo");
                    }));

            entity.Property(e => e.VehicleId).ValueGeneratedNever();

            entity.HasOne(d => d.Vehicle).WithOne(p => p.VehicleVrm)
                .HasForeignKey<VehicleVrm>(d => d.VehicleId)
                .HasConstraintName("FK_Vehicle_VehicleVrm");
        });
        modelBuilder.HasSequence<int>("CompanyIds");
        modelBuilder.HasSequence<int>("CustomerIds");
        modelBuilder.HasSequence<int>("FleetIds").IncrementsBy(10);
        modelBuilder.HasSequence<int>("NetworkIds").IncrementsBy(10);
        modelBuilder.HasSequence<int>("SupplierIds").IncrementsBy(10);
        modelBuilder.HasSequence<int>("VehicleIds");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}