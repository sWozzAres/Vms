@page "/claims"
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.IdentityModel.Tokens.Jwt
@inject IAccessTokenProvider TokenProvider

<PageTitle>Claims</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <NavLink href="/">Home</NavLink>
        </li>
        <li class="breadcrumb-item active">Claims</li>
    </ol>
</nav>

<section class="page">
    <AuthorizeView>
        <Authorized>
            <h1>
                Hello @context.User.Identity!.Name,
                here's the list of your claims:
            </h1>
            <section>
                <h2>Cookie</h2>
                <ul>
                    @foreach (var claim in context.User.Claims)
                    {
                        <li><b>@claim.Type</b>: @claim.Value</li>
                    }
                </ul>
            </section>

            @if (_jwtSecurityToken is not null)
            {
                <section>
                    <h2>Security Token</h2>
                    <section>
                        <h3>Header</h3>
                        <ul>
                            @foreach (var x in _jwtSecurityToken.Header)
                            {
                                <li><strong>@x.Key: </strong>@x.Value</li>
                            }
                        </ul>

                        <h3>Payload</h3>
                        <ul>
                            @foreach (var x in _jwtSecurityToken.Payload)
                            {
                                <li><strong>@x.Key: </strong>@x.Value</li>
                            }
                        </ul>
                    </section>
                </section>
            }

            @if (!string.IsNullOrEmpty(AccessToken))
            {
                <section>
                    <h2>Access Token</h2>
                    <div style="overflow-wrap: anywhere;">
                        @AccessToken
                    </div>
                </section>
            }
        </Authorized>
        <NotAuthorized>
            <p>I'm sorry, I can't display anything until you log in</p>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    public string AccessToken { get; set; } = string.Empty;

    private JwtSecurityToken? _jwtSecurityToken;

    protected override async Task OnInitializedAsync()
    {
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        AccessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            AccessToken = token.Value;
            var handler = new JwtSecurityTokenHandler();
            _jwtSecurityToken = handler.ReadJwtToken(AccessToken);
        }
    }
}