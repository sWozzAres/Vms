@using System.Diagnostics.CodeAnalysis
@typeparam TValue
@inherits InputBase<TValue?>
@inject ILogger<InputSelectOnlyCombobox<TValue>> Logger
@attribute [CascadingTypeParameter(nameof(TValue))]

<input type="hidden" @bind="CurrentValue" />
<SelectOnlyCombobox TValue="TValue" Items="@Options" Label="@LabelText"
@bind-SelectedValue="CurrentValue" class="form-combo">
</SelectOnlyCombobox>

@code {
    [Parameter]
    public string LabelText { get; set; } = null!;

    [Parameter]
    public SelectOption<TValue>[] Options { get; set; } = null!;

    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";

    string classNameAddition = string.Empty;

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();

    //     if (AdditionalAttributes is not null && AdditionalAttributes.TryGetValue("class", out var o))
    //     {
    //         if (o is not null && o is string)
    //             classNameAddition = (string)o;
    //         else
    //             Logger.LogWarning("'class' parameter is invalid.");
    //     }
    // }

    protected override bool TryParseValueFromString(string? value,
    [MaybeNullWhen(false)] out TValue? result,
        [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue?>(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }
}
