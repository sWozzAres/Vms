@using System.Diagnostics.CodeAnalysis
@inherits InputBase<int?>
@inject ILogger<InputSelectOnlyCombobox> Logger

<input type="hidden" @bind="CurrentValue" />
<SelectOnlyCombobox Items="@Options" Label="@LabelText" LabelHidden=false
@bind-SelectedValue="CurrentValue" class="form-combo">
</SelectOnlyCombobox>

@code {
    [Parameter]
    public string LabelText { get; set; } = null!;

    [Parameter]
    public SelectOption[] Options { get; set; } = null!;

    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";

    //[Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } = null!;

    string classNameAddition = string.Empty;

    //int SelectedValue { get; set; } = 111;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (AdditionalAttributes is not null && AdditionalAttributes.TryGetValue("class", out var o))
        {
            if (o is not null && o is string)
                classNameAddition = (string)o;
            else
                Logger.LogWarning("'class' parameter is invalid.");
        }
    }

    protected override bool TryParseValueFromString(string? value,
    [MaybeNullWhen(false)] out int? result,
        [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<int?>(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }
}
