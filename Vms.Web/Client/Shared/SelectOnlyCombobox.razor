@inject IJSRuntime JS
@inject ILogger<SelectOnlyCombobox> Logger

@implements IDisposable

<label id="@id" class="@labelClassName">@Label</label>
<div @ref="comboEl" class="@comboClassName">

    <div id="@comboInputId" @ref="comboInputEl" class="@comboInputClassName" role="combobox" tabindex="@comboInputTabIndex"
         aria-controls="listbox1" aria-expanded="@open.ToHtml()" aria-haspopup="listbox" aria-labelledby="@id" aria-activedescendant="@activeItemId"
    @onblur="onComboInputBlur" @onclick="onComboInputClick">
        @selectItems[selectedIndex].Name
    </div>

    <div id="@comboMenuId" @ref="comboMenuEl" class="combo-menu" role="listbox" aria-labelledby="@id" tabindex="-1"
    @onmousedown="() => onComboMenuMouseDown()">

        @for (int index = 0; index < selectItems.Count; index++)
        {
            var idx = index;
            var item = selectItems[idx];

            var isSelected = selectedIndex == idx;
            var className2 = activeIndex == idx ? "combo-option option-current" : "combo-option";

            <div id="@item.Id" role="option" class="@className2" aria-selected="@isSelected.ToHtml()"
            @onclick="async () => await onComboMenuClick(idx)" @onclick:stopPropagation>
                @item.Name
            </div>
        }
    </div>
</div>

@code {
    [EditorRequired, Parameter]
    public SelectOption[] Items { get; set; } = null!;

    [EditorRequired, Parameter]
    public string Label { get; set; } = null!;

    [Parameter]
    public bool LabelHidden { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; } = null!;

    [CascadingParameter(Name ="IsDisabled")]
    public bool IsDisabled { get; set; }

    [Parameter]
    public int? SelectedValue { get; set; }
    [Parameter]
    public EventCallback<int?> SelectedValueChanged { get; set; }

    Dictionary<int, SelectItem> selectItems { get; set; } = new();

    string classNameAddition = "";
    string labelClassName => string.Join(" ", LabelHidden ? "combo-label hidden" : "combo-label", classNameAddition);
    string comboClassName => string.Join(" ", open ? "combo open" : "combo", classNameAddition);
    string comboInputClassName => IsDisabled ? "combo-input disabled" : "combo-input";
    string comboInputTabIndex => IsDisabled ? "-1" : "0";
    string activeItemId => open ? itemId(activeIndex) : string.Empty;
    string itemId(int i) => $"{id}-{i}";

    // ids
    string id = null!;
    string comboInputId = null!;
    string comboMenuId = null!;
    int selectedIndex;

    // element references
    ElementReference comboEl;
    ElementReference comboInputEl;
    ElementReference comboMenuEl;

    DotNetObjectReference<SelectOnlyCombobox>? objRef;

    // state
    int activeIndex;
    bool open;
    string searchString = string.Empty;
    bool ignoreBlur;

    Timer? timer;

    async Task updateMenuState(bool shouldOpen, bool callFocus = true)
    {
        if (shouldOpen == open)
            return;

        open = shouldOpen;

        if (callFocus)
            await comboInputEl.FocusAsync();
    }

    async Task selectOption(int index)
    {
        selectedIndex = index;
        Logger.LogInformation("Selected index {index}.", index);

        SelectedValue = selectItems[selectedIndex].Value;
        await SelectedValueChanged.InvokeAsync(SelectedValue);
    }

    #region ComboInput events
    async Task onComboInputBlur()
    {
        Logger.LogInformation("onComboInputBlur() {ignoreBlur}", ignoreBlur);
        if (ignoreBlur)
        {
            ignoreBlur = false;
            return;
        }

        if (open)
        {
            await selectOption(activeIndex);
            await updateMenuState(false, false);
        }
    }

    async Task onComboInputClick() {
        if (IsDisabled)
            return;

        await updateMenuState(!open, false);
    }
    #endregion

    void onOptionChange(int index) => activeIndex = index;

    #region ComboMenu events
    async Task onComboMenuClick(int index)
    {
        Logger.LogInformation("OnComboMenuClick('{index}')", index);
        onOptionChange(index);
        await selectOption(index);
        await updateMenuState(false);
    }
    void onComboMenuMouseDown()
    {
        Logger.LogInformation("onComboMenuMouseDown()");
        ignoreBlur = true;
    }
    #endregion

    string getSearchString(string key)
    {
        Logger.LogInformation("getSearchString({key})", key);


        timer?.Dispose();

        timer = new System.Threading.Timer((state) =>
        {
            searchString = string.Empty;
            Logger.LogInformation("Timer tick.");
        }, null, TimeSpan.FromMilliseconds(5000), Timeout.InfiniteTimeSpan);

        if (key == "Backspace")
        {
            if (searchString.Length > 0)
                searchString = searchString[0..^1];
        }
        else if (key == "Clear")
        {
            searchString = string.Empty;
        }
        else if (key.Length == 1)
        {
            searchString = searchString + key[0];
        }

        Logger.LogInformation("SearchString '{searchString}'", searchString);

        return searchString;
    }

    async Task<string> onComboType(string key)
    {
        await updateMenuState(true);

        var searchString1 = getSearchString(key);
        var searchIndex = getIndexByLetter(searchString1, activeIndex + 1);
        if (searchIndex >= 0)
        {
            Logger.LogInformation("Found index {index}.", searchIndex);

            onOptionChange(searchIndex);

            return itemId(searchIndex);
        }
        else
        {
            timer?.Dispose();
            timer = null;

            searchString = string.Empty;

            return "";
        }

        int getIndexByLetter(string ss, int index)
        {
            var orderedOptions = selectItems.Where(item => item.Key >= index)
                .Concat(selectItems.Where(item => item.Key < index));

            Logger.LogInformation("orderedOptions {o}", orderedOptions.Select(x => x.Value.Name));

            var firstMatch = orderedOptions.Where(x => x.Value.Name.StartsWith(ss, StringComparison.OrdinalIgnoreCase));

            return firstMatch.Any() ? firstMatch.First().Key : -1;
        }
    }

    public enum SelectAction
    {
        Close = 0,
        CloseSelect = 1,
        First = 2,
        Last = 3,
        Next = 4,
        Open = 5,
        PageDown = 6,
        PageUp = 7,
        Previous = 8,
        Select = 9,
        Type = 10,
    };

    [JSInvokable]
    public async Task<string> onComboTypeJS(string key)
    {
        var result = await onComboType(key);
        StateHasChanged();
        return result;
    }

    [JSInvokable]
    public void onOptionChangeJS(SelectAction action)
    {
        Logger.LogInformation("onOptionChangeJS({action})", action);
        onOptionChange(getUpdatedIndex(activeIndex, selectItems.Count - 1, action));
        StateHasChanged();

        int getUpdatedIndex(int currentIndex, int maxIndex, SelectAction action)
        {
            const int pageSize = 10; // used for pageup/pagedown

            switch (action)
            {
                case SelectAction.First:
                    return 0;
                case SelectAction.Last:
                    return maxIndex;
                case SelectAction.Previous:
                    return Math.Max(0, currentIndex - 1);
                case SelectAction.Next:
                    return Math.Min(maxIndex, currentIndex + 1);
                case SelectAction.PageUp:
                    return Math.Max(0, currentIndex - pageSize);
                case SelectAction.PageDown:
                    return Math.Min(maxIndex, currentIndex + pageSize);
                default:
                    return currentIndex;
            }
        }
    }

    [JSInvokable]
    public async Task selectOptionJS()
    {
        await selectOption(activeIndex);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task updateMenuStateJS(bool toOpen)
    {
        await updateMenuState(toOpen);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        id = Helpers.GetRandomHtmlId();
        comboInputId = $"{id}-combo";
        comboMenuId = $"{id}-listbox";
        objRef = DotNetObjectReference.Create(this);

        if (InputAttributes is not null && InputAttributes.TryGetValue("class", out var o))
        {
            if (o is not null && o is string)
                classNameAddition = (string)o;
            else
                Logger.LogWarning("'class' parameter is invalid.");
        }

        Logger.LogInformation("classNameAddition {a}", classNameAddition);
        // labelClassName = LabelHidden ? $"combo-label hidden" : $"combo-label";
        // comboClassName = open ? $"combo open" : $"combo";

        // if (InputAttributes is not null &&
        // {
        //     labelClassName += " " + classNameAddition;
        //     comboClassName += " " + classNameAddition;
        // }
        //var classNameAddition = InputAttributes?.TryGetValue .Where(ia => ia.Key == "class").Select(k => k.Value);

        // className = classNameAddition is not null && classNameAddition.Any()
        //     ? string.Join(" ", "dropdown-button-actions", classNameAddition.First())
    }

    protected override void OnParametersSet()
    {
        if (!SelectedValueChanged.HasDelegate)
        {
            throw new InvalidOperationException($"You must bind the '{nameof(selectedIndex)}' parameter.");
        }

        if (Items.Length == 0)
        {
            throw new InvalidOperationException("No items specified.");
        }

        selectItems.Clear();
        for (int index = 0; index < Items.Length; index++)
        {
            selectItems.Add(index, new SelectItem(Items[index], itemId(index)));
        }

        // check initial SelectedValue value exists, if not default to 0
        KeyValuePair<int, SelectItem>? foundEntry = selectItems.FirstOrDefault(entry => entry.Value.Value == SelectedValue);
        selectedIndex = foundEntry.HasValue ? foundEntry.Value.Key : 0;
        activeIndex = selectedIndex;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!await JS.InvokeAsync<bool>("selectOnlyCombobox.installOnComboKeyDown", comboInputId, objRef))
                Logger.LogError("Failed to install keydown handler.");
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
        objRef?.Dispose();
    }

    private class SelectItem
    {
        public int? Value { get; set; }
        public string Name { get; private set; }
        public string Id { get; private set; }

        public SelectItem(SelectOption option, string id) => (Value, Name, Id) = (option.Value, option.Name, id);
    }
}
