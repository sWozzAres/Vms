@using System.Text
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Forms;

@typeparam TModel where TModel : class, ICopyable<TModel>, new()
@inject HttpClient Http
@inject ILogger<EditFormTemplate<TModel>> Logger
@if (loadingException is not null)
{
    <p>An error occured loading the page.</p>
    <p>@loadingException.Message</p>
}
else if (Model is not null)
{
    <EditForm Model="@Model"  OnSubmit="HandleSubmit" class="edit-form">
        <fieldset disabled="@(!InEditMode)">
            <CascadingValue Value="IsDisabled" Name="IsDisabled">
                @ChildContent
            </CascadingValue>
        </fieldset>
        <div class="buttons">
            <button type="button" @onclick="ToggleEdit">@EditButtonText</button>
            <button type="submit" disabled="@(!InEditMode)">Save</button>
        </div>

    </EditForm>
    <p>@Model</p>
}

@code {
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = null!;
    //public RenderFragment ChildContent2 { get; set; } = null!;

    [Parameter, EditorRequired]
    public TModel Model { get; set; } = null!;// default!;
    // public void SetModel(TModel model)
    // {
    //     Model = new();
    //     (Model as ICopyable<TModel>).CopyFrom(model);
    //     StateHasChanged();
    // }

    [Parameter, EditorRequired]
    public string ApiUrl { get; set; } = null!;

    [Parameter]
    public string Id { get; set; } = null!;

    EditContext editContext = null!;
    
    ValidationMessageStore messageStore = null!;
    Exception? loadingException;
    TModel OriginalModel { get; set; } = new();
    bool IsPosting { get; set; }
    bool InEditMode { get; set; } = false;
    string EditButtonText => InEditMode ? "Cancel" : "Edit";
    bool IsDisabled => !InEditMode;

    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();

        // if (Model is not null)
        // {
        //     editContext = new EditContext(Model);
        //     messageStore = new ValidationMessageStore(editContext);
        // }
    }

    async Task HandleSubmit()
    {
        Logger.LogInformation("Handling submit form {model}", Model);
        if (editContext is null)
            return;

        if (editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");

            // Process the valid form
            // await ...
            //await Task.CompletedTask;
            await HandleValidSubmit();
        }
        else
        {
            var vm = editContext.GetValidationMessages();

            Logger.LogInformation("HandleSubmit called: Form is INVALID: {vm}.", vm);
        }
    }
    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Submitting form {model}", Model);
        IsPosting = true;
        try
        {
            var response = await Http.PatchAsJsonAsync(ApiUrl, Model);

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    var content = await response.Content.ReadFromJsonAsync<TModel>();
                    if (content is null)
                    {
                        throw new InvalidOperationException("Failed to deserialize model.");
                    }
                    OriginalModel.CopyFrom(content);

                    InEditMode = false;
                }
                else if (response.StatusCode == HttpStatusCode.NoContent)
                {
                    //TODO
                }
                else
                {
                    Logger.LogError("Form submission returned unexpected status code '{statusCode}'.", response.StatusCode);
                }
            }
            else
            {
                Logger.LogError("Form submission failed with error '{ReasonPhrase}'.", response.ReasonPhrase);
            }
        }
        finally
        {
            IsPosting = false;
        }
    }

    private void ToggleEdit()
    {
        if (!InEditMode)
        {
            OriginalModel.CopyFrom(Model);
        }

        InEditMode = !InEditMode;

        if (!InEditMode)
        {
            editContext = new EditContext(Model);
            messageStore = new ValidationMessageStore(editContext);

            Model.CopyFrom(OriginalModel);
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {

        Logger.LogInformation("SetParametersAsync({parameters})", parameters.ToDictionary());
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
        //ChildContent2 = ChildContent;
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        //await Task.Delay(1000);
    }
    // protected override void OnParametersSet()
    // {
    //     Logger.LogInformation("OnParametersSet()");
    //     base.OnParametersSet();
    // }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}