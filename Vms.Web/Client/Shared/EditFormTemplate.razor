@using System.Text
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Forms;

@typeparam TModel where TModel : class, ICopyable<TModel>, new()
@inject HttpClient Http
@inject ILogger<EditFormTemplate<TModel>> Logger
@inject NavigationManager NavigationManager

@if (loadingException is not null)
{
    <div class="error">
        <p>An error occured loading the page.</p>
        <p>@loadingException.Message</p>
        <button @onclick="() => NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true)">Retry</button>
    </div>
}
else if (Model is not null)
{
    <EditForm EditContext="@editContext" OnSubmit="HandleSubmit" class="edit-form">
        <fieldset disabled="@isDisabled">
            <CascadingValue Value="isDisabled" Name="IsDisabled">
                @ChildContent
            </CascadingValue>
        </fieldset>
        <div class="buttons">
            <button type="button" @onclick="ToggleEdit">@editButtonText</button>
            <button type="submit" disabled="@(!inEditMode)">Save</button>
        </div>
    </EditForm>
}

@code {
    public delegate Task<TModel?> LoadModel();

    [Parameter, EditorRequired] public LoadModel OnLoad { get; set; } = null!;

    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    public TModel Model { get; set; } = null!;
    [Parameter, EditorRequired] public string ApiUrl { get; set; } = null!;
    [Parameter] public string Id { get; set; } = null!;

    EditContext editContext { get; set; } = null!;
    ValidationMessageStore messageStore = null!;

    Exception? loadingException;
    TModel originalModel { get; set; } = new();
    bool isPosting { get; set; }
    bool inEditMode { get; set; } = false;
    string editButtonText => inEditMode ? "Cancel" : "Edit";
    bool isDisabled => !inEditMode;

    async Task HandleSubmit()
    {
        Logger.LogInformation("Handling submit form {model}", Model);
        if (editContext is null)
            return;

        if (editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");

            // Process the valid form
            // await ...
            //await Task.CompletedTask;
            await HandleValidSubmit();
        }
        else
        {
            var vm = editContext.GetValidationMessages();

            Logger.LogInformation("HandleSubmit called: Form is INVALID: {vm}.", vm);
        }
    }
    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Submitting form {model}", Model);
        isPosting = true;
        try
        {
            var response = await Http.PatchAsJsonAsync(ApiUrl, Model);

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    var content = await response.Content.ReadFromJsonAsync<TModel>();
                    if (content is null)
                    {
                        throw new InvalidOperationException("Failed to deserialize model.");
                    }
                    originalModel.CopyFrom(content);

                    inEditMode = false;
                }
                else if (response.StatusCode == HttpStatusCode.NoContent)
                {
                    //TODO
                }
                else
                {
                    Logger.LogError("Form submission returned unexpected status code '{statusCode}'.", response.StatusCode);
                }
            }
            else
            {
                Logger.LogError("Form submission failed with error '{ReasonPhrase}'.", response.ReasonPhrase);
            }
        }
        finally
        {
            isPosting = false;
        }
    }

    private void ToggleEdit()
    {
        if (!inEditMode)
        {
            originalModel.CopyFrom(Model);
        }

        inEditMode = !inEditMode;

        if (!inEditMode)
        {
            Model.CopyFrom(originalModel);
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync({parameters})", parameters.ToDictionary());
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        try
        {
            Model = await OnLoad() ?? throw new InvalidOperationException("Failed to load.");
            if (Model is not null && editContext is null)
            {
                editContext = new EditContext(Model);
                messageStore = new ValidationMessageStore(editContext);
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed.");
            loadingException = ex;
        }
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet() Model is {model}", Model);
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);


    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {

        }
    }
}