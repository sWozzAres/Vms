@inject ILogger<DropdownItem> Logger

@{
    Logger.LogInformation("SelectedValue {selectedValue}, Value {value}.", Parent?.SelectedValue, Value);    
    var className = Parent?.SelectedValue == Value ? "focus" : string.Empty;
}
<li id="@Id" class="@className" role="menuitem" tabindex="-1"
@onclick="onMenuitemClick">
@ChildContent
</li>
@code {
    [EditorRequired, Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [EditorRequired, Parameter]
    public int Value { get; set; }

    [CascadingParameter]
    public DropdownButton Parent { get; set; } = null!;

    string Id => $"{Parent.Id}-{Value}";

    bool? _shouldRender = null;
    protected override bool ShouldRender()
    {
        if (_shouldRender.HasValue && !_shouldRender.Value)
            return false;

        return base.ShouldRender();
    }
    private async Task onMenuitemClick(MouseEventArgs e)
    {
        _shouldRender = false;
        try
        {
            Logger.LogInformation("onMenuItemClick {value}", Value);
            await Parent.ChildSelected(Value);
        }
        finally
        {
            _shouldRender = null;
        }
    }

    protected override void OnParametersSet()
    {
        //base.OnParametersSet();
        Parent.AddDropdownItem(this);
    }
}
