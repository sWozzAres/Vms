@using Vms.Web.Shared
﻿@using Microsoft.AspNetCore.Components.QuickGrid
@typeparam TItem

@inject ILogger<ListTemplate<TItem>> Logger

<section class="list-card">
    <div class="list-header">
        <div class="list-control">
            <div class="list-icon">
            @Icon
            </div>
            <div class="list-kind">
                <h1>@Title</h1>
                <div class="list-dropdown-holder">
                    <h2>
                        <SelectOnlyCombobox Items="@Lists" Label="List" LabelHidden="true"
                        @bind-SelectedValue="selectedList" @bind-SelectedValue:after="SelectedValueChanged2" class="header-combo" />
                    </h2>
                </div>
            </div>
            <div class="list-buttons btn-group">
                @HeaderButtons
            </div>
        </div>
        <div class="list-info">
            <div class="list-description">
                22 items
            </div>
            <div class="list-info-buttons">
                <button>
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#download" />
                    </svg>
                </button>
                <button>
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#gear" />
                    </svg>
                </button>
                <button title="Refresh" @onclick="LoadItemsAsync" disabled="@(state == State.Loading)">
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#arrow-rotate-right" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div class="list-data">
        @if (state == State.Error)
        {
            <div class="message">
                <p>An error has occured.</p>
                <button @onclick="LoadItemsAsync">Retry</button>
            </div>
        }
        else if (state == State.Loading)
        {
            <p class="message"><em>Loading...</em></p>
        }

        else if (Items is not null)
        {
            <table>
                <thead>
                    <tr>
                        @TableHeader
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                        if (RowTemplate is not null)
                        {
                            <tr>@RowTemplate(item)</tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
</section>

@code {
    [EditorRequired, Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; } = null!;

    [EditorRequired, Parameter]
    public RenderFragment TableHeader { get; set; } = null!;

    [Parameter]
    public RenderFragment? Icon { get; set; } = null!;

    [EditorRequired, Parameter]
    public RenderFragment HeaderButtons { get; set; } = null!;

    [EditorRequired, Parameter]
    public string Title { get; set; } = null!;

    public delegate Task<IEnumerable<TItem>> LoadItems(int index);

    [EditorRequired, Parameter]
    public LoadItems OnLoad { get; set; } = default!;

    [EditorRequired, Parameter]
    public List<SelectOption<int?>> Lists { get; set; } = null!;

    int? selectedList = 0;
    private bool listDropdownHidden = true;
    private void ToggleListDropdownHidden() => listDropdownHidden = !listDropdownHidden;

    async Task SelectedValueChanged2()
    {
        listDropdownHidden = true;
        await LoadItemsAsync();
    }
    // private async Task SelectListAsync(int key)
    // {
    //     if (Lists.TryGetValue(key, out string? name))
    //     {
    //         selectedList = key;
    //         listDropdownHidden = true;
    //         await LoadItemsAsync();
    //     }
    //     else
    //     {
    //         Logger.LogError("Failed to select list {key}", key);
    //     }
    // }
    private enum State { Loading = 0, Error, Loaded };
    private State state;

    private IEnumerable<TItem> Items = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //selectedList = Lists.First().Key;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync() {firstRender}", firstRender);

        if (firstRender)
        {
            await LoadItemsAsync();
        }
    }

    private async Task LoadItemsAsync()
    {
        state = State.Loading;

        try
        {
#if DEBUG
        await Task.Delay(1000);
#endif

            Items = await OnLoad(selectedList.Value);

            state = State.Loaded;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occured while loading the list.");

            state = State.Error;
            StateHasChanged();
        }
    }
}
