@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<Header> Logger


<header id="header">
    <div id="header-area">
        <DropdownButton OnSelectCallback="async (value) => selectedArea = value" class="mydropdown2">
            <ButtonContent>
                <div class="holder">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                        <path fill="currentColor" d="M0 72C0 49.9 17.9 32 40 32H88c22.1 0 40 17.9 40 40v48c0 22.1-17.9 40-40 40H40c-22.1 0-40-17.9-40-40V72zM0 232c0-22.1 17.9-40 40-40H88c22.1 0 40 17.9 40 40v48c0 22.1-17.9 40-40 40H40c-22.1 0-40-17.9-40-40V232zM128 392v48c0 22.1-17.9 40-40 40H40c-22.1 0-40-17.9-40-40V392c0-22.1 17.9-40 40-40H88c22.1 0 40 17.9 40 40zM160 72c0-22.1 17.9-40 40-40h48c22.1 0 40 17.9 40 40v48c0 22.1-17.9 40-40 40H200c-22.1 0-40-17.9-40-40V72zM288 232v48c0 22.1-17.9 40-40 40H200c-22.1 0-40-17.9-40-40V232c0-22.1 17.9-40 40-40h48c22.1 0 40 17.9 40 40zM160 392c0-22.1 17.9-40 40-40h48c22.1 0 40 17.9 40 40v48c0 22.1-17.9 40-40 40H200c-22.1 0-40-17.9-40-40V392zM448 72v48c0 22.1-17.9 40-40 40H360c-22.1 0-40-17.9-40-40V72c0-22.1 17.9-40 40-40h48c22.1 0 40 17.9 40 40zM320 232c0-22.1 17.9-40 40-40h48c22.1 0 40 17.9 40 40v48c0 22.1-17.9 40-40 40H360c-22.1 0-40-17.9-40-40V232zM448 392v48c0 22.1-17.9 40-40 40H360c-22.1 0-40-17.9-40-40V392c0-22.1 17.9-40 40-40h48c22.1 0 40 17.9 40 40z" class=""></path>
                    </svg>
                </div>
            </ButtonContent>
            <ChildContent>
                <DropdownItem Value="1">
                    <div class="holder">
                        <svg viewBox="0 0 448 512" fill="red">
                            <use xlink:href="icons/solid.svg#user" />
                        </svg>
                        User
                    </div>
                </DropdownItem>
                <DropdownItem Value="2">
                    <div class="holder">
                        <svg viewBox="0 0 448 512" fill="green">
                            <use xlink:href="icons/solid.svg#user" />
                        </svg>
                        User
                    </div>
                </DropdownItem>
                <DropdownItem Value="3">
                    <div class="holder">
                        <svg viewBox="0 0 448 512">
                            <use xlink:href="icons/solid.svg#user" />
                        </svg>
                        User
                    </div>
                </DropdownItem>
            </ChildContent>
        </DropdownButton>
    </div>
    <div id="header-logo" @onclick="GoHome">
        <svg class="logo-svg" height="60" viewBox="0 0 640 512">
            <use xlink:href="icons/solid.svg#car-side" />
        </svg>
    </div>
    <div id="header-search">
        <SearchBox></SearchBox>
    </div>
    <AuthorizeView>
        <Authorized>
            <div id="header-toolbar">
                <MenuButton Items="@items" Align="MenuButton.Alignment.Right" OnSelectCallback="(val) => selectedItem = val">
                    <svg viewBox="0 0 448 512">
                        <use xlink:href="icons/solid.svg#user" />
                    </svg>
                </MenuButton>
                @* <button id="header-account" @onclick="Toggle">
                <img src="/icons/user.svg" alt="icon name" height="40">
                @{
                var className = contentVisible ? "" : "hidden";
                }

                <div id="header-account-content">
                <ul>
                <li><a href="authentication/profile">@context.User.Identity?.Name</a></li>
                <li><a href="/claims">Claims</a></li>
                <li><a href="#" @onclick="BeginLogOut">Sign out</a></li>
                </ul>

                </div>
                </button> *@
            </div>
        </Authorized>
        <NotAuthorized>
            <div id="header-not-authorized">
                @* <a href="authentication/register">Register</a> *@
                <a href="authentication/login">Log in</a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</header>




@code {
    int selectedArea = 1;

    private string[] items = new string[]
    {
        "Choose a Fruit",
        "Apple",
        "Banana",
        "Blueberry",
        "Boysenberry",
        "Cherry",
        "Cranberry",
        "Durian",
        "Eggplant",
        "Fig",
        "Grape",
        "Guava",
        "Huckleberry"
    };
    string selectedItem = string.Empty;

    bool contentVisible = false;
    

    IDisposable? registration;

    void GoHome() => NavigationManager.NavigateTo("/");

    void Toggle() => contentVisible = !contentVisible;
    

    


    void BeginLogOut()
    {
        NavigationManager.NavigateToLogout("authentication/logout");
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation.EndsWith("#"))
        {
            context.PreventNavigation();
        }

        return ValueTask.CompletedTask;
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        contentVisible = false;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    //IEnumerable<string> history = null!;

    

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
                NavigationManager.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    void IDisposable.Dispose()
    {
        registration?.Dispose();
        NavigationManager.LocationChanged -= LocationChanged;
    }
}
