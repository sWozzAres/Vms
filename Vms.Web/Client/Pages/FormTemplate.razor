@using System.Text.Json;
@inject ILogger<FormTemplate<TModel>> Logger
@typeparam TModel where TModel : class

<EditForm Model="Model">
    <fieldset disabled="@(!inEdit)">
        @ChildContent
    </fieldset>
    <button @onclick="ToggleEdit">@buttonText</button>
</EditForm>

@code {
    [Parameter]
    public TModel Model { get; set; } = null!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    bool inEdit;
    TModel? originalModel;
    string buttonText => inEdit ? "Cancel" : "Edit";

    void ToggleEdit()
    {
        Logger.LogInformation("ToggleEdit() {inEdit}", inEdit);
        if (!inEdit)
        {
            originalModel = DeepClone(Model);
        }

        inEdit = !inEdit;

        if (!inEdit)
        {
            Logger.LogInformation("Restoring {m} {o}", Model, originalModel);
            Model = DeepClone(originalModel!);
            Logger.LogInformation("Restoring {m} {o}", Model, originalModel);
        }
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync() {model}", Model);
        await base.SetParametersAsync(parameters);
        //shouldRender = false;
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        //await Task.Delay(1000);
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }

    public TModel DeepClone(TModel obj)
        => JsonSerializer.Deserialize<TModel>(JsonSerializer.Serialize(obj)) 
            ?? throw new InvalidOperationException("Failed to deserialize.");
}
