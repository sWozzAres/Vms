@using System.Diagnostics.CodeAnalysis;
@inject ILogger<DriverRelatedList> Logger
@inject ServerApiHttpClient Api

<RelatedList TypeName="Drivers" Items="Items" Context="driver">
    <IconContent>
        <div class="entity-svg-person">
            <svg viewBox="0 0 320 512">
                <use xlink:href="icons/solid.svg#person" />
            </svg>
        </div>
    </IconContent>
    <Buttons>
        <button @onclick="() => addDriverDialogVisible = true">New</button>
    </Buttons>
    <ItemTemplate>
        <article>
            <div class="content-header">
                <h1><a href="/driver/view/@driver.EmailAddress">@driver.FullName</a></h1>
                <MenuButton Items="@driverOptions" Align="MenuButton.Alignment.Right"
                            OnSelectCallback="(val) => OptionSelected(val, driver)" />
            </div>
            <dl>
                <dt>Email:</dt>
                <dd><a href="@mailToAddress(driver.EmailAddress)">@driver.EmailAddress</a></dd>
                <dt>Mobile:</dt>
                <dd>@driver.MobileNumber</dd>
            </dl>
        </article>
    </ItemTemplate>
</RelatedList>

@if (dialogShowMode != Dialog.ShowMode.None)
{
    <Dialog AutoShow="dialogShowMode">
        <div class="dialog-container">
            <div class="dialog-header">
                <h1>Confirm</h1>
            </div>
            <div class="dialog-content">
                <p>Are you sure you want to remove @selectedDriver.FullName ?</p>
            </div>
            <div class="dialog-footer">
                <button @onclick="CloseDialog">No</button>
                <button type="submit" @onclick="RemoveDriverFromVehicle">Yes</button>
                <p style="color: red;">@removalErrorMessage</p>
            </div>
        </div>
    </Dialog>
}

@if (addDriverDialogVisible)
{
    @* OnSelected="DriverSearchDialogSelect"  *@

    <ListSelector TItem="DriverShortDto" Title="Find Driver"
                  OnSelected="DriverSearchDialogSelect"
                  OnGetItems="Api.GetDriversShortAsync"
                  OnClose="DriverSearchDialogClose">
        <TableHeader>
            <th>Name</th>
            <th>Email</th>
        </TableHeader>
        <RowTemplate>
            <td>@context.FullName</td>
            <td>@context.EmailAddress</td>
        </RowTemplate>
    </ListSelector>
}

@code {
    [Parameter, EditorRequired] public List<DriverShortDto> Items { get; set; } = null!;
    [Parameter, EditorRequired] public Guid VehicleId { get; set; }

    #region AddDriver Dialog
    bool addDriverDialogVisible = false;

    void DriverSearchDialogClose()
    {
        addDriverDialogVisible = false;
        StateHasChanged();
    }
    public async Task DriverSearchDialogSelect(DriverShortDto item)
    {
        Logger.LogInformation("{email} {name}", item.EmailAddress, item.FullName);
        var response = await Api.AddDriverToVehicle(VehicleId, item.Id);
        if (response.IsSuccessStatusCode)
        {
            var driver = await Api.GetDriverShortAsync(item.Id);
            if (driver is not null)
            {
                Items.Insert(0, driver);
            }
        }
        addDriverDialogVisible = false;
        //StateHasChanged();
    }
    #endregion
    Dialog.ShowMode dialogShowMode = Dialog.ShowMode.None;
    string mailToAddress(string emailAddress) => $"mailto:{emailAddress}";
    const string optionRemove = "Remove";
    string[] driverOptions = new string[]
    {
        optionRemove
    };
    DriverShortDto selectedDriver = null!;
    string removalErrorMessage = null!;

    void CloseDialog() => dialogShowMode = Dialog.ShowMode.None;

    void OptionSelected(string? option, DriverShortDto driver)
    {
        if (option == optionRemove)
        {
            selectedDriver = driver;
            dialogShowMode = Dialog.ShowMode.ShowModal;
        }
    }

    async Task RemoveDriverFromVehicle()
    {
        try
        {
            var response = await Api.RemoveDriverFromVehicle(VehicleId, selectedDriver.Id);
            if (response.IsSuccessStatusCode)
            {
                dialogShowMode = Dialog.ShowMode.None;
                Items.Remove(selectedDriver);
            }
            else if (response.StatusCode == HttpStatusCode.NotFound)
            {
                removalErrorMessage = "Driver is not connected to this vehicle.";
            }
            else
            {
                removalErrorMessage = "Failed to remove driver.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to remove driver.");
            removalErrorMessage = "Failed to remove driver.";
        }
    }
}
