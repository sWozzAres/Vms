@using System.Diagnostics.CodeAnalysis;
@inject ILogger<DriverRelatedList> Logger
@inject ServerApiHttpClient Api
@inject VehicleApiClient VehicleApi

<RelatedList TypeName="Drivers" Items="Items" Context="driver">
    <IconContent>
        <div class="svg-medium svg-driver">
            <img src="icons/driver.svg" />
        </div>
    </IconContent>
    <Buttons>
        <button @onclick="() => addDriverDialogActive = true">New</button>
    </Buttons>
    <ItemTemplate>
    
            <div class="content-header">
                <h1><a href="/driver/view/@driver.EmailAddress">@driver.FullName</a></h1>
                <MenuButton Items="@driverOptions" Align="MenuButton.Alignment.Right"
                            OnSelectCallback="(val) => OptionSelected(val, driver)" />
            </div>
            <dl>
                <dt>Email:</dt>
                <dd><a href="@mailToAddress(driver.EmailAddress)">@driver.EmailAddress</a></dd>
                <dt>Mobile:</dt>
                <dd>@driver.MobileNumber</dd>
            </dl>
     
    </ItemTemplate>
</RelatedList>

@if (removeDriverDialogActive)
{
    <Dialog AutoShow="Dialog.ShowMode.ShowModal">
        <div class="dialog-container">
            <div class="dialog-header">
                <h1>Confirm</h1>
            </div>
            <div class="dialog-content">
                <p>Are you sure you want to remove @selectedDriver.FullName ?</p>
            </div>
            <div class="dialog-footer">
                <div class="dialog-controls">
                    <button @onclick="() => removeDriverDialogActive = false">No</button>
                    <button type="submit" @onclick="RemoveDriverFromVehicle">Yes</button>
                </div>
                @if (removeErrorMessage is not null)
                {
                    <p class="error">@removeErrorMessage</p>
                }
            </div>
        </div>
    </Dialog>
}

@if (addDriverDialogActive)
{
    <ListSelector TItem="DriverShortDto" Title="Find Driver"
                  OnSelected="DriverSearchDialogSelect"
                  OnGetItems="Api.GetDriversShortAsync"
                  OnClose="() => addDriverDialogActive = false">
        <TableHeader>
            <th>Name</th>
            <th>Email</th>
        </TableHeader>
        <RowTemplate>
            <td>@context.FullName</td>
            <td>@context.EmailAddress</td>
        </RowTemplate>
    </ListSelector>
}

@code {
    [Parameter, EditorRequired] public List<DriverShortDto> Items { get; set; } = null!;
    [Parameter, EditorRequired] public Guid VehicleId { get; set; }
    [Parameter, EditorRequired] public EventCallback OnChanged { get; set; }

    #region AddDriver Dialog
    bool addDriverDialogActive;
    bool removeDriverDialogActive;

    // void DriverSearchDialogClose()
    // {
    //     addDriverDialogActive = false;
    //     StateHasChanged();
    // }
    public async Task DriverSearchDialogSelect(DriverShortDto item)
    {
        await VehicleApi.AddDriverToVehicleAsync(VehicleId, item.Id);
        // if (response.IsSuccessStatusCode)
        // {
        //     var driver = await Api.GetDriverShortAsync(item.Id);
        //     if (driver is not null)
        //     {
        //         Items.Insert(0, driver);
        //     }
        // }
        await OnChanged.InvokeAsync();
        addDriverDialogActive = false;
        //StateHasChanged();
    }
    #endregion

    string mailToAddress(string emailAddress) => $"mailto:{emailAddress}";
    DriverShortDto selectedDriver = null!;
    string removeErrorMessage = null!;

    const string optionRemove = "Remove";
    string[] driverOptions = new string[] { optionRemove };
    void OptionSelected(string? option, DriverShortDto driver)
    {
        if (option == optionRemove)
        {
            selectedDriver = driver;
            removeDriverDialogActive = true;
        }
    }

    async Task RemoveDriverFromVehicle()
    {
        try
        {
            await VehicleApi.RemoveDriverFromVehicleAsync(VehicleId, selectedDriver.Id);

            if (OnChanged.HasDelegate)
            {
                await OnChanged.InvokeAsync();
            }

            removeDriverDialogActive = false;

            // if (response.IsSuccessStatusCode)
            // {
            //     dialogShowMode = Dialog.ShowMode.None;
            //     Items.Remove(selectedDriver);
            // }
            // else if (response.StatusCode == HttpStatusCode.NotFound)
            // {
            //     removalErrorMessage = "Driver is not connected to this vehicle.";
            // }
            // else
            // {
            //     removalErrorMessage = "Failed to remove driver.";
            // }
        }
        catch (Exception ex)
        {
            removeErrorMessage = "Failed to remove driver.";
            Logger.LogError(ex, removeErrorMessage);

        }
    }
}
