@page "/vehicle/view/{id:guid}"
@using System.Diagnostics;
@inject ServerApiHttpClient Http
@inject ILogger<View> Logger
@attribute [Authorize]

<PageTitle>Vehicle</PageTitle>

@if (loadingException is not null)
{
    <RetryLoad Exception="loadingException" OnRetry="Load" />
}
else
{
    <ViewTemplate TypeName="Vehicle" Title="@Title">
        <IconContent>
            <div class="entity-svg-vehicle">
                <svg viewBox="0 0 512 512">
                    <use xlink:href="icons/solid.svg#car" />
                </svg>
            </div>
        </IconContent>
        <Buttons>
            <button onclick="Follow">Follow</button>
        </Buttons>
        <HeaderContent>
            @if (vehicle is not null)
            {
                <dl>
                    <div class="namevalue">
                        <dt>Vrm</dt>
                        <dd>@vehicle.Vrm</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Make</dt>
                        <dd>@vehicle.Make</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Model</dt>
                        <dd>@vehicle.Model</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Customer</dt>
                        <dd><a href="">@vehicle.Customer?.Name</a></dd>
                    </div>
                    <div class="namevalue">
                        <dt>Fleet</dt>
                        <dd><a href="">@vehicle.Fleet?.Name</a></dd>
                    </div>
                </dl>
            }
        </HeaderContent>
        <ChildContent>
            @if (vehicle is not null)
            {
                <TabControl Title="Vehicle Tabs" TitleVisible="false">
                    <TabPage Text="Details">
                            <Edit Id="@Id.ToString()" OnLoad="async () => await Task.FromResult(vehicle.ToDto())" />
                    </TabPage>
                    <TabPage Text="Related">
                        <div class="related50">
                        <CustomerRelated Customer="vehicle.Customer" VehicleId="@Id" OnChanged="Load" />
                        <FleetRelated Fleet="vehicle.Fleet" VehicleId="@Id" OnChanged="Load" />
                        </div>
                        <DriverRelatedList Items="vehicle.Drivers" VehicleId="@Id" OnChanged="Load" />
                    </TabPage>
                    <TabPage Text="Work">
                        <WorkList Id="Id" />
                    </TabPage>
                </TabControl>
            }
        </ChildContent>
    </ViewTemplate>
}

@code {
    [Parameter, EditorRequired] public Guid Id { get; set; }

    Exception? loadingException;
    EditFormTemplate<VehicleDto> editForm = null!;
    
    VehicleFullDto? vehicle;
    string Title => vehicle is null ? "" : vehicle.Vrm;

    async Task Load()
    {
        try
        {
            vehicle = await Http.GetVehicleFullAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load service booking.");
            loadingException = ex;
        }
    }

    async Task Follow()
    {
        await Task.CompletedTask;
    }

    async Task NewDriver()
    {
        await Task.CompletedTask;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        
        ArgumentNullException.ThrowIfNull(Id);

        await Load();
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}