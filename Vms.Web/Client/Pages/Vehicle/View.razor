@page "/vehicle/view/{id}"
@inject HttpClient Http
@inject ILogger<View> Logger
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations

<PageTitle>Vehicle</PageTitle>


<section>
    <h1>Vehicle</h1>

    <TabControl Title="Vehicle Tabs" TitleVisible="false">
        <TabPage Text="Detail">
            @if (makes is not null)
            {
                <EditFormTemplate @ref="editForm" Id="@Id" ApiUrl="/api/Vehicle" OnLoad="LoadVehicle">
                    <DataAnnotationsValidator />

                    <div class="form-section">
                        <label for="vrm">Vrm</label>
                        <InputText id="vrm" @bind-Value="editForm.Model.Vrm" />
                        <ValidationMessage For="@(() => editForm.Model.Vrm)" />

                        <InputSelectOnlyCombobox Options="@makeOptions" LabelText="Status" @bind-Value="editForm.Model.Make" />
                        <ValidationMessage For="@(() => editForm.Model.Make)" />

                        <label for="model">Model</label>
                        <InputText id="model" @bind-Value="editForm.Model.Model" />
                        <ValidationMessage For="@(() => editForm.Model.Model)" />

                        <label for="chassis">Chassis Number</label>
                        <InputText id="chassis" @bind-Value="editForm.Model.ChassisNumber" />
                        <ValidationMessage For="@(() => editForm.Model.ChassisNumber)" />

                        <label for="datereg">First Registered</label>
                        <InputDate id="datereg" @bind-Value="editForm.Model.DateFirstRegistered" />
                        <ValidationMessage For="@(() => editForm.Model.DateFirstRegistered)" />
                        @*
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="editForm.Model.Email" />
                    <ValidationMessage For="@(() => editForm.Model.Email)" />


                    <label for="age">Age</label>
                    <InputNumber id="age" @bind-Value="editForm.Model.Age" disabled />
                    <ValidationMessage For="@(() => editForm.Model.Age)" />


                    <label for="isAdministrator">Is Admin</label>
                    <InputCheckbox id="isAdministrator" @bind-Value="editForm.Model.IsAdministrator" />
                    form.Model

                    <label for="birthDate">Birth Date</label>
                    <InputDate id="birthDate" @bind-Value="editForm.Model.BirthDate" />
                    <ValidationMessage For="@(() => editForm.Model.BirthDate)" />


                    <label for="notes">Notes</label>
                    <InputTextArea id="notes" @bind-Value="editForm.Model.Notes" />
                    <ValidationMessage For="@(() => editForm.Model.Notes)" /> *@
                    </div>
                    <div class="form-section">

                        <label for="street">Street</label>
                        <InputText id="street" @bind-Value="editForm.Model.Address.Street" />
                        <ValidationMessage For="@(() => editForm.Model.Address.Street)" />

                        <label for="locality">Locality</label>
                        <InputText id="locality" @bind-Value="editForm.Model.Address.Locality" />
                        <ValidationMessage For="@(() => editForm.Model.Address.Locality)" />

                        <label for="town">Town</label>
                        <InputText id="town" @bind-Value="editForm.Model.Address.Town" />
                        <ValidationMessage For="@(() => editForm.Model.Address.Town)" />

                        <label for="postcode">Postcode</label>
                        <InputText id="postcode" @bind-Value="editForm.Model.Address.Postcode" />
                        <ValidationMessage For="@(() => editForm.Model.Address.Postcode)" />

                        <label for="latitude">Latitude</label>
                        <InputNumber id="latitude" @bind-Value="editForm.Model.Address.Location.Latitude" />
                        <ValidationMessage For="@(() => editForm.Model.Address.Location.Latitude)" />

                        <label for="longitude">Longitude</label>
                        <InputNumber id="longitude" @bind-Value="editForm.Model.Address.Location.Longitude" />
                        <ValidationMessage For="@(() => editForm.Model.Address.Location.Longitude)" />

                        @* <label>Manufacturer</label>
                    <div class="form-control">
                    <InputRadioGroup @bind-Value="editForm.Model.TheManufacturer">
                    @foreach (var manufacturer in (Person.Manufacturer[])Enum.GetValues(typeof(Person.Manufacturer)))
                    {

                    <InputRadio Value="@manufacturer" />
                    <text>&nbsp;</text>

                    @manufacturer

                    }
                    </InputRadioGroup>
                    </div>
                    <ValidationMessage For="@(() => editForm.Model.TheManufacturer)" /> *@
                    </div>
                </EditFormTemplate>
            }
        </TabPage>
        <TabPage Text="Related">

        </TabPage>
    </TabControl>

    
</section>

@code {
    [Parameter] public string Id { get; set; } = null!;

    EditFormTemplate<VehicleDto> editForm = null!;
    SelectOption<string?>[] makeOptions = null!;
    VehicleMakeListModel[]? makes;

    async Task<VehicleDto?> LoadVehicle() {
        var vehicle = await Http.GetFromJsonAsync<VehicleFullDto>($"/api/Vehicle/{Id}?r=1");
        return vehicle is null ? null : vehicle.ToDto();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();

        makes = await Http.GetFromJsonAsync<VehicleMakeListModel[]>("/api/VehicleMake/All");
        if (makes is not null)
        {
            makeOptions = SelectOption<string?>.WithPrompt("Make", 
                makes.Select(m => new SelectOption<string?>(m.Make, m.Make)));
        }
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}