@page "/vehicle/view/{id:guid}"
@inject ServerApiHttpClient Http
@inject ILogger<View> Logger
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations

<PageTitle>Vehicle</PageTitle>

<ViewTemplate Title="@Title">
    <IconContent>
        <div class="entity-svg-vehicle">
            <svg viewBox="0 0 512 512">
                <use xlink:href="icons/solid.svg#car" />
            </svg>
        </div>
    </IconContent>
    <Buttons>
        <button onclick="Follow">Follow</button>
    </Buttons>
    <HeaderContent>
        @if (vehicle is not null)
        {
            <div class="namevalue">
                <span class="name">Vrm</span>
                <span class="value">@vehicle.Vrm</span>
            </div>
            <div class="namevalue">
                <span class="name">Make</span>
                <span class="value">@vehicle.Make</span>
            </div>
            <div class="namevalue">
                <span class="name">Model</span>
                <span class="value">@vehicle.Model</span>
            </div>
            <div class="namevalue">
                <span class="name">Customer</span>
                <span class="value">@vehicle.Customer?.Name</span>
            </div>
            <div class="namevalue">
                <span class="name">Fleet</span>
                <span class="value">@vehicle.Fleet?.Name</span>
            </div>
        }
    </HeaderContent>
    <ChildContent>
        @if (vehicle is not null)
        {
            <TabControl Title="Vehicle Tabs" TitleVisible="false">
                <TabPage Text="Details">
                    @if (isLoaded)
                    {
                        <EditFormTemplate TModel="VehicleDto" @ref="editForm" Id="@Id.ToString()" ApiUrl="/api/Vehicle" OnLoad="LoadVehicle">
                            <DataAnnotationsValidator />

                            <div class="form-section">
                                <InputSelectOnlyCombobox Options="@companyOptions" LabelText="Company" @bind-Value="editForm.Model.CompanyCode" />
                                <ValidationMessage For="@(() => editForm.Model.CompanyCode)" />

                                <label for="vrm">Vrm</label>
                                <InputText id="vrm" @bind-Value="editForm.Model.Vrm" />
                                <ValidationMessage For="@(() => editForm.Model.Vrm)" />

                                <InputSelectOnlyCombobox Options="@makeOptions" LabelText="Make" @bind-Value="editForm.Model.Make" @bind-Value:after="OnMakeChanged" />
                                <ValidationMessage For="@(() => editForm.Model.Make)" />

                                <InputSelectOnlyCombobox Options="@modelOptions" LabelText="Model" @bind-Value="editForm.Model.Model" />
                                <ValidationMessage For="@(() => editForm.Model.Model)" />

                                <label for="chassis">Chassis Number</label>
                                <InputText id="chassis" @bind-Value="editForm.Model.ChassisNumber" />
                                <ValidationMessage For="@(() => editForm.Model.ChassisNumber)" />

                                <label for="datereg">First Registered</label>
                                <InputDate id="datereg" @bind-Value="editForm.Model.DateFirstRegistered" />
                                <ValidationMessage For="@(() => editForm.Model.DateFirstRegistered)" />

                            </div>
                            <div class="form-section">
                                <fieldset>
                                    <legend>Address</legend>

                                    <label for="street">Street</label>
                                    <InputText id="street" @bind-Value="editForm.Model.Address.Street" />
                                    <ValidationMessage For="@(() => editForm.Model.Address.Street)" />

                                    <label for="locality">Locality</label>
                                    <InputText id="locality" @bind-Value="editForm.Model.Address.Locality" />
                                    <ValidationMessage For="@(() => editForm.Model.Address.Locality)" />

                                    <label for="town">Town</label>
                                    <InputText id="town" @bind-Value="editForm.Model.Address.Town" />
                                    <ValidationMessage For="@(() => editForm.Model.Address.Town)" />

                                    <label for="postcode">Postcode</label>
                                    <InputText id="postcode" @bind-Value="editForm.Model.Address.Postcode" />
                                    <ValidationMessage For="@(() => editForm.Model.Address.Postcode)" />

                                    <label for="latitude">Latitude</label>
                                    <InputNumber id="latitude" @bind-Value="editForm.Model.Address.Location.Latitude" />
                                    <ValidationMessage For="@(() => editForm.Model.Address.Location.Latitude)" />

                                    <label for="longitude">Longitude</label>
                                    <InputNumber id="longitude" @bind-Value="editForm.Model.Address.Location.Longitude" />
                                    <ValidationMessage For="@(() => editForm.Model.Address.Location.Longitude)" />
                                </fieldset>
                            </div>
                        </EditFormTemplate>
                    }
                </TabPage>
                <TabPage Text="Related">
                    <DriverRelatedList Items="vehicle.Drivers" VehicleId="@Id" />
                </TabPage>
            </TabControl>
        }
    </ChildContent>
</ViewTemplate>


@code {
    [Parameter] public Guid Id { get; set; }

    EditFormTemplate<VehicleDto> editForm = null!;
    List<SelectOption<string?>> makeOptions = null!;
    List<SelectOption<string?>> modelOptions = null!;
    List<SelectOption<string?>> companyOptions = null!;
    bool isLoaded;
    VehicleFullDto? vehicle;
    string Title => vehicle is null ? "" : vehicle.Vrm;

    async Task OnMakeChanged()
    {
        modelOptions = UIOptions.BuildModelOptions(editForm.Model.Make is null 
            ? null 
            : await Http.GetModelsShortAsync(editForm.Model.Make));
        editForm.Model.Model = null;
    }

    async Task<VehicleDto?> LoadVehicle()
    {
        return await Task.FromResult(vehicle is null ? null : vehicle.ToDto());
    }

    async Task Follow()
    {
        await Task.CompletedTask;
    }

    async Task NewDriver()
    {
        await Task.CompletedTask;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();

        vehicle = await Http.GetVehicleFull(Id);

        var companies = Http.GetCompaniesShortAsync();
        var makes = Http.GetMakesShortAsync();

        if (vehicle.Make is not null)
        {
            var models = Http.GetModelsShortAsync(vehicle.Make);

            await Task.WhenAll(companies, makes, models);

            modelOptions = UIOptions.BuildModelOptions(models.Result);
        }
        else
        {
            await Task.WhenAll(companies, makes);

            modelOptions = UIOptions.BuildModelOptions(null);
        }

        companyOptions = UIOptions.BuildCompanyOptions(companies.Result);
        makeOptions = UIOptions.BuildMakeOptions(makes.Result);
        
        isLoaded = true;
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}