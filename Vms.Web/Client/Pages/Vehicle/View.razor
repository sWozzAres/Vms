@page "/vehicle/view/{id}"
@inject HttpClient Http
@inject ILogger<View> Logger
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations

<PageTitle>Vehicle</PageTitle>

<section>
    <h1>Vehicle</h1>
    @if (makes is not null)
    {
        <EditFormTemplate @ref="editForm" Id="@Id" ApiUrl="Vehicle" OnLoad="LoadVehicle">
            <DataAnnotationsValidator />

            <div class="form-section">
                @* <label for="name">Name</label>
            <InputText id="name" @bind-Value="editForm.Model.Name" />
            <ValidationMessage For="@(() => editForm.Model.Name)" />


            <label for="email">Email</label>
            <InputText id="email" @bind-Value="editForm.Model.Email" />
            <ValidationMessage For="@(() => editForm.Model.Email)" />


            <label for="age">Age</label>
            <InputNumber id="age" @bind-Value="editForm.Model.Age" disabled />
            <ValidationMessage For="@(() => editForm.Model.Age)" />


            <label for="isAdministrator">Is Admin</label>
            <InputCheckbox id="isAdministrator" @bind-Value="editForm.Model.IsAdministrator" />
            form.Model

            <label for="birthDate">Birth Date</label>
            <InputDate id="birthDate" @bind-Value="editForm.Model.BirthDate" />
            <ValidationMessage For="@(() => editForm.Model.BirthDate)" />


            <label for="notes">Notes</label>
            <InputTextArea id="notes" @bind-Value="editForm.Model.Notes" />
            <ValidationMessage For="@(() => editForm.Model.Notes)" /> *@
            </div>
            <div class="form-section">
                <InputSelectOnlyCombobox Options="@makeOptions" LabelText="Status" @bind-Value="editForm.Model.Make" />
                <ValidationMessage For="@(() => editForm.Model.Make)" />

                @* <label>Manufacturer</label>
            <div class="form-control">
            <InputRadioGroup @bind-Value="editForm.Model.TheManufacturer">
            @foreach (var manufacturer in (Person.Manufacturer[])Enum.GetValues(typeof(Person.Manufacturer)))
            {

            <InputRadio Value="@manufacturer" />
            <text>&nbsp;</text>

            @manufacturer

            }
            </InputRadioGroup>
            </div>
            <ValidationMessage For="@(() => editForm.Model.TheManufacturer)" /> *@
            </div>
        </EditFormTemplate>
    }
</section>

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    EditFormTemplate<VehicleDto> editForm = null!;

    SelectOption<string>[] makeOptions
     = new SelectOption<string>[]
     {
         new (null, "-- Select Make --"),
         //     new (0, "Active"),
         //     new (1, "Inactive"),
    };

    VehicleMakeListModel[]? makes;

    async Task<VehicleDto?> LoadVehicle()
        => await Http.GetFromJsonAsync<VehicleDto>($"/api/Vehicle/{Id}");

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();

        makes = await Http.GetFromJsonAsync<VehicleMakeListModel[]>("/api/VehicleMake/All");
        if (makes is not null)
        {
            makeOptions = makeOptions.Concat(
                makes.Select(m => new SelectOption<string>(m.Make, m.Make))
            ).ToArray();
        }
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}