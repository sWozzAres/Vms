@typeparam TGridItem

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<ListTemplate2<TGridItem>> Logger
@attribute [CascadingTypeParameter(nameof(TGridItem))]

<section class="list-card">
    <div class="list-header">
        <div class="list-control">
            <div class="list-icon">
                @IconContent
            </div>
            <div class="list-kind">
                <h1>Vehicles</h1>
                <div class="list-dropdown-holder">
                    <h2>
                        <SelectOnlyCombobox Items="Options" Label="List" LabelHidden="true"
                        @bind-SelectedValue="selectedList" @bind-SelectedValue:after="Refresh" class="header-combo" />
                    </h2>
                </div>
            </div>
            <div class="list-buttons btn-group">
                @Buttons
            </div>
        </div>
        <div class="list-info">
            <div class="list-description">
                <Paginator State="pagination">

                </Paginator>
            </div>
            <div class="list-info-buttons">
                <button>
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#download" />
                    </svg>
                </button>
                <button>
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#gear" />
                    </svg>
                </button>
                <button title="Refresh" @onclick="Refresh" disabled="@error">
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#arrow-rotate-right" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div class="list-data">
        @if (error)
        {
            <div class="error">
                <p>An error has occured.</p>
                <button @onclick="Refresh">Retry</button>
            </div>
        }
        else
        {
            <QuickGrid TGridItem="TGridItem" @ref="grid" ItemsProvider="itemsProvider" Pagination="pagination">
                @GridColumns
            </QuickGrid>
        }
    </div>
</section>

@code {
    [Parameter, EditorRequired] public SelectOption<int?>[] Options { get; set; } = null!;
    [Parameter, EditorRequired] public string ApiUrl { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment IconContent { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment Buttons { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment? GridColumns { get; set; }

    GridItemsProvider<TGridItem> itemsProvider { get; set; } = null!;
    PaginationState pagination = new() { ItemsPerPage = 10 };
    QuickGrid<TGridItem> grid = null!;
    int? selectedList = 0;

    async Task Refresh() => await grid.RefreshDataAsync();
    bool error;

    protected override void OnInitialized()
    {
        itemsProvider = async req =>
        {
            try
            {
                var response = await Http.GetFromJsonAsync<ListResult<TGridItem>>($"{ApiUrl}?list={selectedList}&start={req.StartIndex}&take={req.Count}");
                if (response is null)
                    throw new InvalidOperationException("Failed to load data.");
                error = false;
                return GridItemsProviderResult.From(response.Items, response.TotalCount);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load data.");

                error = true;
                StateHasChanged();
                return GridItemsProviderResult.From(Enumerable.Empty<TGridItem>().ToList(), 0);
            }
        };
    }
}