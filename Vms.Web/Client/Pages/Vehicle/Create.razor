@page "/vehicle/create"
@inject ServerApiHttpClient Http
@inject ILogger<Create> Logger
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Create Vehicle</PageTitle>

<Dialog AutoShow="Dialog.ShowMode.ShowModal" ClassName="create-dialog scroll-content">

    <EditForm Model="vehicle" OnValidSubmit="HandleValidSubmit" class="edit-form dialog-container">

        <div class="dialog-header">
            <h1>New Vehicle</h1>
        </div>
        <div class="dialog-content">
            @if (isLoaded)
            {
                <DataAnnotationsValidator />
                <fieldset class="form-grid" disabled="@isPosting">
                    <div class="form-section">
                        <fieldset>
                            <legend>Detail</legend>
                            <InputSelectOnlyCombobox Options="@companyOptions" LabelText="Company" @bind-Value="vehicle.CompanyCode" />
                            <ValidationMessage For="@(() => vehicle.CompanyCode)" />

                            <label for="vrm">Vrm</label>
                            <InputText id="vrm" @bind-Value="vehicle.Vrm" />
                            <ValidationMessage For="@(() => vehicle.Vrm)" />

                            <InputSelectOnlyCombobox Options="@makeOptions" LabelText="Make" @bind-Value="vehicle.Make" @bind-Value:after="OnMakeChanged" />
                            <ValidationMessage For="@(() => vehicle.Make)" />

                            <InputSelectOnlyCombobox Options="@modelOptions" LabelText="Model" @bind-Value="vehicle.Model" />
                            <ValidationMessage For="@(() => vehicle.Model)" />

                            <label for="chassis">Chassis Number</label>
                            <InputText id="chassis" @bind-Value="vehicle.ChassisNumber" />
                            <ValidationMessage For="@(() => vehicle.ChassisNumber)" />

                            <label for="datereg">First Registered</label>
                            <InputDate id="datereg" @bind-Value="vehicle.DateFirstRegistered" />
                            <ValidationMessage For="@(() => vehicle.DateFirstRegistered)" />

                            <label for="motdue">MOT Due</label>
                            <InputDate id="motdue" @bind-Value="vehicle.MotDue" />
                            <ValidationMessage For="@(() => vehicle.MotDue)" />
                        </fieldset>
                    </div>
                    <div class="form-section">
                        <fieldset>
                            <legend>Address</legend>

                            <label for="street">Street</label>
                            <InputText id="street" @bind-Value="vehicle.Address.Street" />
                            <ValidationMessage For="@(() => vehicle.Address.Street)" />

                            <label for="locality">Locality</label>
                            <InputText id="locality" @bind-Value="vehicle.Address.Locality" />
                            <ValidationMessage For="@(() => vehicle.Address.Locality)" />

                            <label for="town">Town</label>
                            <InputText id="town" @bind-Value="vehicle.Address.Town" />
                            <ValidationMessage For="@(() => vehicle.Address.Town)" />

                            <label for="postcode">Postcode</label>
                            <InputText id="postcode" @bind-Value="vehicle.Address.Postcode" />
                            <ValidationMessage For="@(() => vehicle.Address.Postcode)" />

                            <label for="latitude">Latitude</label>
                            <InputNumber id="latitude" @bind-Value="vehicle.Address.Location.Latitude" />
                            <ValidationMessage For="@(() => vehicle.Address.Location.Latitude)" />

                            <label for="longitude">Longitude</label>
                            <InputNumber id="longitude" @bind-Value="vehicle.Address.Location.Longitude" />
                            <ValidationMessage For="@(() => vehicle.Address.Location.Longitude)" />
                        </fieldset>
                    </div>
                </fieldset>
            }


        </div>
        <div class="buttons dialog-footer">
            <button type="button" disabled="@isPosting" @onclick="OnClose">Close</button>
            <button type="submit" disabled="@isPosting" @onclick="()=> createMode = CreateMode.Create">Create</button>
            <button type="submit" disabled="@isPosting" @onclick="() => createMode = CreateMode.CreateAndNew">Create & New</button>
        </div>

    </EditForm>


</Dialog>

@code {
    [Parameter] public EventCallback OnClose { get; set; }

    VehicleDto vehicle = new()
        {
            Vrm = "HK52YUL",
            Make = "FORD",
            Model = "Model #1",
            DateFirstRegistered = new DateOnly(2000, 1, 1)
        };
    VehicleDto originalModel = new();

    List<SelectOption<string?>> makeOptions = null!;
    List<SelectOption<string?>> modelOptions = null!;
    List<SelectOption<string?>> companyOptions = null!;

    bool isPosting;
    bool isLoaded;
    enum CreateMode { None, Create, CreateAndNew };
    CreateMode createMode;

    async Task OnMakeChanged()
    {
        modelOptions = UIOptions.BuildModelOptions(vehicle.Make is null ? null : await Http.GetModelsShortAsync(vehicle.Make));
        vehicle.Model = null;
    }

    async Task HandleValidSubmit()
    {
        Logger.LogInformation("Submitting form {model}", vehicle);
        isPosting = true;
        try
        {
            var response = await Http.CreateVehicleAsync(vehicle);
            switch (createMode)
            {
                case CreateMode.Create:
                    NavigationManager.NavigateTo($"/vehicle/view/{response.Id}");
                    break;
                case CreateMode.CreateAndNew:
                    vehicle.CopyFrom(originalModel);
                    break;
            }
        }
        finally
        {
            isPosting = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var companies = Http.GetCompaniesShortAsync();
        var makes = Http.GetMakesShortAsync();

        if (vehicle.Make is not null)
        {
            var models = Http.GetModelsShortAsync(vehicle.Make);

            await Task.WhenAll(companies, makes, models);

            modelOptions = UIOptions.BuildModelOptions(models.Result);
        }
        else
        {
            await Task.WhenAll(companies, makes);

            modelOptions = UIOptions.BuildModelOptions(null);
        }

        companyOptions = UIOptions.BuildCompanyOptions(companies.Result);
        makeOptions = UIOptions.BuildMakeOptions(makes.Result);

        await Task.Delay(3000);
        isLoaded = true;
    }
}

