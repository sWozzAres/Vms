@page "/people/view/{id}"
@inject HttpClient Http
@inject ILogger<View> Logger
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations

<PageTitle>Person</PageTitle>

<section>
    <h1>Person</h1>
    <a href="/people/view/2">Edit Person</a>

    <EditFormTemplate Model="@person" Id="@Id" ApiUrl="Person">
        <DataAnnotationsValidator />

        <div class="form-section">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="person.Name" />
            <ValidationMessage For="@(() => person.Name)" />


            <label for="email">Email</label>
            <InputText id="email" @bind-Value="person.Email" />
            <ValidationMessage For="@(() => person.Email)" />


            <label for="age">Age</label>
            <InputNumber id="age" @bind-Value="person.Age" disabled />
            <ValidationMessage For="@(() => person.Age)" />


            <label for="isAdministrator">Is Admin</label>
            <InputCheckbox id="isAdministrator" @bind-Value="person.IsAdministrator" />
            <ValidationMessage For="@(() => person.IsAdministrator)" />


            <label for="birthDate">Birth Date</label>
            <InputDate id="birthDate" @bind-Value="person.BirthDate" />
            <ValidationMessage For="@(() => person.BirthDate)" />


            <label for="notes">Notes</label>
            <InputTextArea id="notes" @bind-Value="person.Notes" />
            <ValidationMessage For="@(() => person.Notes)" />
        </div>
        <div class="form-section">
            <InputSelectOnlyCombobox Options="@statusOptions" LabelText="Status" @bind-Value="person.Status" />
            <ValidationMessage For="@(() => person.Status)" />

            <label>Manufacturer</label>
            <div class="form-control">
                <InputRadioGroup @bind-Value="person.TheManufacturer">
                    @foreach (var manufacturer in (Person.Manufacturer[])Enum.GetValues(typeof(Person.Manufacturer)))
                    {

                        <InputRadio Value="@manufacturer" />
                        <text>&nbsp;</text>

                        @manufacturer

                    }
                </InputRadioGroup>
            </div>
            <ValidationMessage For="@(() => person.TheManufacturer)" />
        </div>
    </EditFormTemplate>

    <p>@person</p>

</section>

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    //EditFormTemplate<Person> template = null!;
    Person person = null!;

    //public template.Model template.Model => template.Model;// null!;// new() { Name = "z"};
    //Exception? loadingException;

    public SelectOption[] statusOptions = new SelectOption[]
    {
        new SelectOption(null, "-- Select Status --"),
        new SelectOption(0, "Active"),
        new SelectOption(1, "Inactive"),
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {

        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        //await Task.Delay(1000);
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);

        var result = await Http.GetFromJsonAsync<Person>($"Person/{Id}");

        if (result is not null)
        {
            //template.Model = result;
            //template.Model = new();
            //template.SetModel(result);
            // template.Model = new Person();
            // (template.Model as ICopyable<Person>).CopyFrom(result);
            //template.SetModel(template.Model);
            person = new();
            (person as ICopyable<Person>).CopyFrom(result);
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
    //     await base.OnAfterRenderAsync(firstRender);
    //     //await Task.Delay(1000);
    // }
}