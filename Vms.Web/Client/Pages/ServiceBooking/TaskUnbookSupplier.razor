@inject ServerApiHttpClient Api

<TaskTemplate @ref="taskRef" TModel="TaskUnbookSupplierCommand"  Title="Unbook Supplier" OnCompleted="OnCompleted"
              Url="/api/servicebooking" Id="@ServiceBooking.Id" Task="unbooksupplier">
    <InputRadioGroup @bind-Value="taskRef.Model.Result">
        <div class="option">
            <div class="option-select">
                <InputRadio id="unbooked" Value="TaskUnbookSupplierCommand.TaskResult.Unbooked" />
                <label for="unbooked">Unbooked</label>
            </div>
            <fieldset class="option-data" disabled="@OptionUnbookedDisabled">
                <label for="reason">Reason</label>
                <InputTextArea id="reason" @bind-Value="taskRef.Model.Reason" />
                <ValidationMessage For="@(() => taskRef.Model.Reason)" />
            </fieldset>
        </div>
    </InputRadioGroup>
</TaskTemplate>

@code {
    [Parameter, EditorRequired] public ServiceBookingFullDto ServiceBooking { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<bool> OnCompleted { get; set; }

    TaskTemplate<TaskUnbookSupplierCommand> taskRef = null!;

    bool isLoaded;
    bool OptionUnbookedDisabled => taskRef.Model.Result != TaskUnbookSupplierCommand.TaskResult.Unbooked;

    // async Task<PostResponse> Save(TaskUnbookSupplierCommand model) 
    //     => await Api.UnbookSupplier(ServiceBooking.Id, model);

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ServiceBooking);
        if (!OnCompleted.HasDelegate) throw new ArgumentNullException(nameof(OnCompleted));

        isLoaded = true;
    }
}
