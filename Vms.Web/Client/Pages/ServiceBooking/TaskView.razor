@inject ServerApiHttpClient Api

<div class="taskview">
    @if (ServiceBooking.Status == 0)
    {
        <Alert Style="Alert.AlertStyle.Info">You must complete the booking details.</Alert>
    }
    else
    {
        <div class="task-content">
            <MenuButton Items="@items" Align="MenuButton.Alignment.Left" OnSelectCallback="OnSelectTask">
                Task
            </MenuButton>

            @if (ServiceBooking.Status == ServiceBookingDtoStatus.Book)
            {
                <button @onclick="AssignSupplier" class="btn-prev-task">Assign Supplier</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.Confirm)
            {
                <button @onclick="UnbookSupplier" class="btn-prev-task">Unbook</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.CheckArrival)
            {
                <button @onclick="UnbookSupplier" class="btn-prev-task">Unbook</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.CheckWorkStatus)
            {
                <button @onclick="UnbookSupplier" class="btn-prev-task">Unbook</button>
            }

            @if(ServiceBooking.RescheduleTime is not null)
            {
                <strong>
                    @RescheduleTimeDisplay(ServiceBooking.RescheduleTime.Value)
                </strong>
            }

            @if (ServiceBooking.Status == ServiceBookingDtoStatus.Assign)
            {
                <button @onclick="AssignSupplier" class="btn-next-task">Assign Supplier</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.Book)
            {
                <button @onclick="BookSupplier" class="btn-next-task">Book Supplier</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.Confirm)
            {
                <button @onclick="Confirm" class="btn-next-task">Confirm Booked</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.CheckArrival)
            {
                <button @onclick="CheckArrival" class="btn-next-task">Check Arrival</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.CheckWorkStatus)
            {
                <button @onclick="CheckWorkStatus" class="btn-next-task">Check Work Status</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.RebookDriver)
            {
                <button @onclick="RebookDriver" class="btn-next-task">Rebook Driver</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.NotifyCustomer)
            {
                <button @onclick="NotifyCustomer" class="btn-next-task">Notify Customer</button>
            }
            else if (ServiceBooking.Status == ServiceBookingDtoStatus.NotifyCustomerDelay)
            {
                <button @onclick="NotifyCustomerDelay" class="btn-next-task">Notify Customer Delay</button>
            }
        </div>

    }
</div>



@code {
    [Parameter, EditorRequired] public ServiceBookingFullDto ServiceBooking { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<string> OnSelectTask { get; set; }

    private string[] items = new string[]
    {
        "Notify Customer Delay",
        "Assign Supplier",
        "Unbook Supplier",
        "Book Supplier",
        "Confirm Booked",
        "Check Arrival",
        "Check Work Status",
        "Notify Customer",
        "Chase Driver",
        "Rebook Driver"

    };
    string selectedItem = string.Empty;

    string RescheduleTimeDisplay(DateTime rescheduleTime)
    {
        if (DateTime.Now > rescheduleTime)
        {
            return "The next task is overdue";
        }
        else
            return $"The next task is scheduled for {DateText()} at {rescheduleTime.ToString("t")}";

        string DateText()
        {
            if (rescheduleTime.Date == DateTime.Today)
                return "today";
            else if (rescheduleTime.Date == DateTime.Today.AddDays(1))
                return "tommorrow";
            else if (rescheduleTime.Date == DateTime.Today.AddDays(-1))
                return "yesterday";
            else
                return rescheduleTime.ToString("d");
        }
    }

    public async Task AssignSupplier() => await OnSelectTask.InvokeAsync("Assign Supplier");
    public async Task BookSupplier() => await OnSelectTask.InvokeAsync("Book Supplier");
    public async Task UnbookSupplier() => await OnSelectTask.InvokeAsync("Unbook Supplier");
    public async Task Confirm() => await OnSelectTask.InvokeAsync("Confirm Booked");
    public async Task CheckArrival() => await OnSelectTask.InvokeAsync("Check Arrival");
    public async Task ChaseDriver() => await OnSelectTask.InvokeAsync("Chase Driver");
    public async Task RebookDriver() => await OnSelectTask.InvokeAsync("Rebook Driver");
    public async Task CheckWorkStatus() => await OnSelectTask.InvokeAsync("Check Work Status");
    public async Task NotifyCustomer() => await OnSelectTask.InvokeAsync("Notify Customer");
    public async Task NotifyCustomerDelay() => await OnSelectTask.InvokeAsync("Notify Customer Delay");

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ServiceBooking);
        if (!OnSelectTask.HasDelegate) throw new ArgumentNullException(nameof(OnSelectTask));
    }
}
