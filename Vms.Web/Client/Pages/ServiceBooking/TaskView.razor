@inject ServerApiHttpClient Api

<div class="taskview">
    <div class="task-content">
        @if (ServiceBooking.Status == 1)
        {
            <button @onclick="AssignSupplier">Assign Supplier</button>
        }
        else if (ServiceBooking.Status == 2)
        {
            <button @onclick="AssignSupplier">Assign Supplier</button>
            <button @onclick="BookSupplier">Book Supplier</button>
        }
        else if (ServiceBooking.Status == 3)
        {
            <button @onclick="UnbookSupplier">Unbook</button>
            <button @onclick="Confirm">Confirm Booked</button>
        }
        else if (ServiceBooking.Status == 4)
        {
            <button @onclick="UnbookSupplier">Unbook</button>
            <button @onclick="CheckArrival">Check Arrival</button>
        }
        else if (ServiceBooking.Status == 5)
        {
            <button @onclick="UnbookSupplier">Unbook</button>
            <button @onclick="CheckWorkStatus">Check Work Status</button>
        }
        else if (ServiceBooking.Status == 8)
        {
            <button @onclick="NotifyCustomer">Notify Customer</button>
        }
        else if (ServiceBooking.Status == 9)
        {
            <button @onclick="NotifyCustomerDelay">Notify Customer Delay</button>
        }
    </div>
    <MenuButton Items="@items" Align="MenuButton.Alignment.Right" OnSelectCallback="OnSelectTask">
        @* <svg viewBox="0 0 128 512">
        <use xlink:href="icons/solid.svg#ellipsis-vertical" />
        </svg> *@
        Task
    </MenuButton>
</div>



@code {
    [Parameter, EditorRequired] public ServiceBookingFullDto ServiceBooking { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<string> OnSelectTask { get; set; }

    private string[] items = new string[]
    {
        "Notify Customer Delay",
        "Assign Supplier",
        "Unbook Supplier",
        "Book Supplier",
        "Confirm Booked",
        "Check Arrival",
        "Check Work Status",
        "Notify Customer",
        "Chase Driver"
        
    };
    string selectedItem = string.Empty;

    public async Task AssignSupplier() => await OnSelectTask.InvokeAsync("Assign Supplier");
    public async Task BookSupplier() => await OnSelectTask.InvokeAsync("Book Supplier");
    public async Task UnbookSupplier() => await OnSelectTask.InvokeAsync("Unbook Supplier");
    public async Task Confirm() => await OnSelectTask.InvokeAsync("Confirm Booked");
    public async Task CheckArrival() => await OnSelectTask.InvokeAsync("Check Arrival");
    public async Task ChaseDriver() => await OnSelectTask.InvokeAsync("Chase Driver");
    public async Task CheckWorkStatus() => await OnSelectTask.InvokeAsync("Check Work Status");
    public async Task NotifyCustomer() => await OnSelectTask.InvokeAsync("Notify Customer");
    public async Task NotifyCustomerDelay() => await OnSelectTask.InvokeAsync("Notify Customer Delay");

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ServiceBooking);
        if (!OnSelectTask.HasDelegate) throw new ArgumentNullException(nameof(OnSelectTask));
    }
}
