@using Markdig;
@inject ServerApiHttpClient Api

<section class="activitylog">
    <h1>Activity Log</h1>
    <EditForm Model="noteModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <InputTextArea @bind-Value="noteModel.Note" rows="5" placeholder="Enter note..." />
        <ValidationMessage For="@(() => noteModel.Note)"/>
        <div class="buttons">
            <button type="submit" disabled="@buttonsDisabled">Add Note</button>
            <button type="button" disabled="@buttonsDisabled" @onclick="Refresh">Refresh</button>
        </div>
    </EditForm>

    @if (entries is not null)
    {
        @foreach (var entry in entries.OrderByDescending(e => e.EntryDate))
        {
            <article class="activity-entry">
                @((MarkupString)Markdown.ToHtml(entry.Text))
                <footer>
                    @entry.EntryDate.ToString("f") @entry.UserName
                </footer>
            </article>
        }
    }
</section>

@code {
    [CascadingParameter] TabControl TabControl { get; set; } = null!;
    [CascadingParameter] TabPage TabPage { get; set; } = null!;

    [Parameter, EditorRequired] public Guid Id { get; set; }

    bool IsActive => TabControl.ActivePage == TabPage;
    List<ActivityLogDto> entries = new();
    NoteModel noteModel = new();
    bool buttonsDisabled => isWaitingForApi;
    bool isWaitingForApi;
    bool loaded;

    async Task Refresh()
    {
        isWaitingForApi = true;
        try
        {
            entries = await Api.GetActivity(Id);
            loaded = true;
        }
        finally
        {
            isWaitingForApi = false;
        }
    }

    public async Task HandleValidSubmit()
    {
        isWaitingForApi = true;
        try
        {
            var response = await Api.AddNote(Id, new AddNoteDto(noteModel.Note));
            if (response is PostResponse.Created)
            {
                var result = await response.Response.Content.ReadFromJsonAsync<ActivityLogDto>()
                    ?? throw new InvalidOperationException("Failed to read response.");

                entries.Add(result);
                noteModel.Note = string.Empty;
            }
        }
        finally
        {
            isWaitingForApi = false;
        }
    }

    protected override void OnInitialized()
    {
        if (Id == Guid.Empty) throw new ArgumentNullException(nameof(Id));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loaded && IsActive)
        {
            await Refresh();
            StateHasChanged();
        }
    }


    class NoteModel
    {
        [Required, StringLength(1024)]
        public string Note { get; set; } = string.Empty;
    }
}
