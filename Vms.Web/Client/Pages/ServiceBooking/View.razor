@page "/servicebooking/view/{id:guid}"
@inject ServerApiHttpClient Api
@inject ILogger<View> Logger
@attribute [Authorize]

<PageTitle>Service Booking</PageTitle>

@if (loadingException is not null)
{
    <RetryLoad Exception="loadingException" OnRetry="Load" />
}
else
{
    <ViewTemplate TypeName="Service Booking" Title="@Title">
        <IconContent>
            <div class="entity-svg-servicebooking">
                <svg viewBox="0 0 448 512">
                    <use xlink:href="icons/solid.svg#book" />
                </svg>
            </div>
        </IconContent>
        <Buttons>
            <button onclick="Follow">Follow</button>
        </Buttons>
        <HeaderContent>
            @if (serviceBooking is not null)
            {
                <dl>
                    <div class="namevalue">
                        <dt>Vrm</dt>
                        <dd><a href="/vehicle/view/@serviceBooking.VehicleId">@serviceBooking.Vrm</a></dd>
                    </div>
                    <div class="namevalue">
                        <dt>Make</dt>
                        <dd>@serviceBooking.Make</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Model</dt>
                        <dd>@serviceBooking.Model</dd>
                    </div>
                </dl>
            }
        </HeaderContent>
        <ChildContent>
            @if (serviceBooking is not null)
            {
                <TaskView ServiceBooking="serviceBooking" />
                <button @onclick="() => displayTask = !displayTask">Click me!</button>
                <TabControl Title="Vehicle Tabs" TitleVisible="false">
                    <TabPage Text="Details">

                        <div class="details">
                            <Edit Id="@Id.ToString()" OnLoad="async () => await Task.FromResult(serviceBooking.ToDto())" />
                            <div class="task">
                                @if (displayTask)
                                {
                                    <h1>Task goes here</h1>
                                }
                            </div>
                        </div>

                    </TabPage>
                    <TabPage Text="Events">
                        <p>TODO</p>
                    </TabPage>
                </TabControl>
            }
        </ChildContent>
    </ViewTemplate>
}

@code {
    [Parameter, EditorRequired] public Guid Id { get; set; }

    bool displayTask;
    Exception? loadingException;
    ServiceBookingFullDto? serviceBooking;
    string Title => serviceBooking is null ? "" : serviceBooking.Id.ToString();

    async Task Load()
    {
        try
        {
            serviceBooking = await Api.GetServiceBookingFullAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load service booking.");
            loadingException = ex;
        }
    }
    
    async Task Follow()
    {
        await Task.CompletedTask;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        ArgumentNullException.ThrowIfNull(Id);
        await Load();
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}