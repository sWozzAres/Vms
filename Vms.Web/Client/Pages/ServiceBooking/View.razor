@page "/servicebooking/view/{id:guid}"
@inject ServerApiHttpClient Api
@inject ILogger<View> Logger
@attribute [Authorize]

<PageTitle>Service Booking</PageTitle>

@if (loadingException is not null)
{
    <RetryLoad Exception="loadingException" OnRetry="LoadServiceBooking" />
}
else
{
    <ViewTemplate TypeName="Service Booking" Title="@Title">
        <IconContent>
            <div class="entity-svg-servicebooking">
                <svg viewBox="0 0 448 512">
                    <use xlink:href="icons/solid.svg#book" />
                </svg>
            </div>
        </IconContent>
        <Buttons>
            <button onclick="Follow">Follow</button>
        </Buttons>
        <HeaderContent>
            @if (serviceBooking is not null)
            {
                <dl>
                    <div class="namevalue">
                        <dt>Status</dt>
                        <dd>@serviceBooking.StatusText</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Vrm</dt>
                        <dd><a href="/vehicle/view/@serviceBooking.VehicleId">@serviceBooking.Vrm</a></dd>
                    </div>
                    <div class="namevalue">
                        <dt>Make</dt>
                        <dd>@serviceBooking.Make</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Model</dt>
                        <dd>@serviceBooking.Model</dd>
                    </div>
                    <div class="namevalue">
                        <dt>Supplier</dt>
                        <dd><a href="/supplier/view/@serviceBooking.Supplier?.Code">@serviceBooking.Supplier?.Name</a></dd>
                    </div>
                </dl>
            }
        </HeaderContent>
        <ChildContent>
            @if (serviceBooking is not null)
            {
                <TaskView ServiceBooking="serviceBooking" OnSelectTask="SelectTask" />
                <div class="details">
                    <TabControl Title="Vehicle Tabs" TitleVisible="false">
                        <TabPage Text="Details">
                            <Edit OnLoad="LoadModel" OnSave="SaveModel" />
                        </TabPage>
                        <TabPage Text="Events">
                            <Events/>
                        </TabPage>
                    </TabControl>
                    <div class="task">
                        @if (displayTask == "Book Supplier")
                        {
                            <TaskBookSupplier ServiceBooking="serviceBooking"
                                              OnCompleted="TaskCompleted" />
                        }
                        else if (displayTask == "Unbook Supplier")
                        {
                            <TaskUnbookSupplier ServiceBooking="serviceBooking"
                                                OnCompleted="TaskCompleted" />
                        }
                    </div>
                </div>
            }
        </ChildContent>
    </ViewTemplate>
}

@if (displayTask == "Assign Supplier")
{
    <SupplierSelector TItem="SupplierLocatorDto" Id="Id"
                      OnSelected="SupplierDialogSelect"
                      OnGetItems="Api.GetSuppliersForServiceBookingShortAsync"
                      OnClose="() => displayTask = null">
        <TableHeader>
            <th>Distance</th>
            <th>Code</th>
            <th>Name</th>
        </TableHeader>
        <RowTemplate>
            <td>@context.DistanceInMiles.ToString("0.00")</td>
            <td>@context.Code</td>
            <td>@context.Name</td>
        </RowTemplate>
    </SupplierSelector>
}

@code {
    [Parameter, EditorRequired] public Guid Id { get; set; }

    string? displayTask;

    Exception? loadingException;
    ServiceBookingFullDto? serviceBooking;
    string Title => serviceBooking?.Id.ToString() ?? "";

    async Task TaskCompleted(bool saved)
    {
        displayTask = null;
        if (saved)
        {
            await LoadServiceBooking();
        }
    }

    async Task SupplierDialogSelect(SupplierLocatorDto item)
    {
        var result = await Api.AssignSupplier(Id, new TaskAssignSupplierCommand() { SupplierCode = item.Code });

        if (result is PostResponse.Success)
        {
            displayTask = null;
            await LoadServiceBooking();
        }
        else
        {
            if (result is PostResponse.UnprocessableEntity ue)
            {
                //TODO should never happen but it does should we show errors? Probably not.
                throw new InvalidOperationException("Validation error.");
            }
            else
            {
                if (result is PostResponse.BadRequest br)
                {
                    throw new VmsDomainException(br.ErrorMessage);
                }
                else// if (result is PostResponse.Failure)
                {
                    throw new InvalidOperationException("There was a problem sending your request.");
                }
            }
        }
    }

    void SelectTask(string name) => displayTask = name;

    async Task<PostResponse> SaveModel(ServiceBookingDto model)
    {
        var result = await Api.SaveServiceBooking(Id, model);
        if (result is PostResponse.Success)
        {
            await LoadServiceBooking();
            StateHasChanged();
        }
        return result;
    }

    async Task<ServiceBookingDto> LoadModel()
    {
        return await Task.FromResult(serviceBooking!.ToDto());
    }

    async Task LoadServiceBooking()
    {
        try
        {
            serviceBooking = await Api.GetServiceBookingFullAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load service booking.");
            loadingException = ex;
        }
    }

    async Task Follow()
    {
        await Task.CompletedTask;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        ArgumentNullException.ThrowIfNull(Id);
        await LoadServiceBooking();
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }
}