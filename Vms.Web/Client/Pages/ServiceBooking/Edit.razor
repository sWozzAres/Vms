@inject ServerApiHttpClient Api
<EditFormTemplate2 TModel="ServiceBookingDto" @ref="editForm" OnLoad="LoadModel" OnSave="SaveModel">
    <DataAnnotationsValidator />
    @if (isLoaded)
    {
        <div class="form-section">
            <InputSelectOnlyCombobox Options="@serviceLevelOptions" LabelText="Service Level" @bind-Value="editForm.Model.ServiceLevel" />
            <ValidationMessage For="@(() => editForm.Model.ServiceLevel)" />

            <label for="preferreddate1">Preferred Date 1</label>
            <InputDate id="preferreddate1" @bind-Value="editForm.Model.PreferredDate1" />
            <ValidationMessage For="@(() => editForm.Model.PreferredDate1)" />
            <label for="preferreddate2">Preferred Date 2</label>
            <InputDate id="preferreddate2" @bind-Value="editForm.Model.PreferredDate2" />
            <ValidationMessage For="@(() => editForm.Model.PreferredDate2)" />
            <label for="preferreddate3">Preferred Date 3</label>
            <InputDate id="preferreddate3" @bind-Value="editForm.Model.PreferredDate3" />
            <ValidationMessage For="@(() => editForm.Model.PreferredDate3)" />
            <InputSelectOnlyCombobox Options="@userOptions" LabelText="Assigned To" @bind-Value="editForm.Model.AssignedToUserId" />
            <ValidationMessage For="@(() => editForm.Model.AssignedToUserId)" />
            
        </div>
        <div class="form-section">
            
        </div>
    }
</EditFormTemplate2>

@code {
    [Parameter, EditorRequired] public ServiceBookingFullDto ServiceBooking { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback OnAfterSave { get; set; }

    EditFormTemplate2<ServiceBookingDto> editForm = null!;
    List<SelectOption<Vms.Web.Shared.ServiceLevel>> serviceLevelOptions = null!;
    List<SelectOption<string?>> userOptions = null!;
    bool isLoaded;

    protected override async Task OnInitializedAsync()
    {
        var users = await Api.GetUsersForCompany(ServiceBooking.CompanyCode);
        userOptions = UIOptions.BuildUserOptions(users);
        isLoaded = true;
    }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ServiceBooking);
        if (!OnAfterSave.HasDelegate) throw new ArgumentNullException(nameof(OnAfterSave));
        
        serviceLevelOptions = UIOptions.GetServiceLevelOptions();
    }

    async Task<ServiceBookingDto> LoadModel()
    {
        return await Task.FromResult(ServiceBooking.ToDto());
    }

    async Task<PostResponse> SaveModel(ServiceBookingDto model)
    {
        var result = await Api.SaveServiceBooking(ServiceBooking.Id, model);
        if (result is PostResponse.Success)
        {
            await OnAfterSave.InvokeAsync();
        }
        return result;
    }
}
