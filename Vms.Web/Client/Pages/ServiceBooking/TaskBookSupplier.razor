@inject ServerApiHttpClient Api

<section class="task-form">
    <h1>Book Supplier</h1>
    @if (isLoaded)
    {
        <EditForm EditContext="editContext" OnValidSubmit="ValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <InputRadioGroup @bind-Value="model.Result">

                <div class="option">
                    <div class="option-select">
                        <InputRadio id="booked" Value="TaskBookSupplierDto.TaskResult.Booked" />
                        <label for="booked">Booked</label>
                    </div>
                    <fieldset class="option-data" disabled="@OptionBookedDisabled">
                        <label for="bookeddate">Date</label>
                        <InputDate id="bookeddate" @bind-Value="model.BookedDate" />
                        <ValidationMessage For="@(() => model.BookedDate)" />
                    </fieldset>
                </div>

                <div class="option">
                    <div class="option-select">
                        <InputRadio id="refused" Value="TaskBookSupplierDto.TaskResult.Refused" />
                        <label for="refused">Refused</label>
                    </div>
                    <fieldset class="option-data" disabled="@OptionRefusedDisabled">
                        <CascadingValue Value="OptionRefusedDisabled" Name="IsDisabled">
                            <InputSelectOnlyCombobox Options="@refusalReasonOptions" LabelText="Reason" @bind-Value="model.RefusalReason" />
                            <ValidationMessage For="@(() => model.RefusalReason)" />
                        </CascadingValue>
                    </fieldset>
                </div>

                <div class="option">
                    <div class="option-select">
                        <InputRadio id="rescheduled" Value="TaskBookSupplierDto.TaskResult.Rescheduled" />
                        <label for="rescheduled">Reschedule</label>


                    </div>
                    <fieldset class="option-data" disabled="@OptionRescheduledDisabled">
                        <CascadingValue Value="OptionRescheduledDisabled" Name="IsDisabled">
                            <label for="rescheduletime">Date</label>
                            <InputDate id="rescheduletime" @bind-Value="model.RescheduleDate" />
                            <ValidationMessage For="@(() => model.RescheduleDate)" />

                            <label for="rescheduletime">Time</label>
                            <InputText id="rescheduletime" @bind-Value="model.RescheduleTime" />
                            <ValidationMessage For="@(() => model.RescheduleTime)" />

                            <InputSelectOnlyCombobox Options="@rescheduleReasonOptions" LabelText="Reason" @bind-Value="model.RescheduleReason" />
                            <ValidationMessage For="@(() => model.RescheduleReason)" />
                        </CascadingValue>
                    </fieldset>
                </div>

            </InputRadioGroup>

            <div class="option">
                <label for="callee">Callee</label>
                <InputText id="callee" @bind-Value="model.Callee" />
                <ValidationMessage For="@(() => model.Callee)" />
            </div>

            <div class="buttons">
                @if (errorMessage is not null)
                {
                    <div class="error">
                        @errorMessage
                    </div>
                }
                <button type="button" @onclick="() => OnCompleted.InvokeAsync(false)">Cancel</button>
                <button type="submit">Ok</button>
            </div>
        </EditForm>
    }
</section>
@code {
    [Parameter, EditorRequired] public ServiceBookingFullDto ServiceBooking { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<bool> OnCompleted { get; set; }
    //[Parameter] public EventCallback OnSave { get; set; }

    TaskBookSupplierDto model = new()
        {
            BookedDate = DateOnly.FromDateTime(DateTime.Today),
            RescheduleDate = DateOnly.FromDateTime(DateTime.Today),
            RescheduleTime = DateTime.Now.ToShortTimeString()
        };

    List<SelectOption<string?>> refusalReasonOptions = null!;
    List<SelectOption<string?>> rescheduleReasonOptions = null!;
    bool isLoaded;
    EditContext editContext = null!;
    ValidationMessageStore messageStore = null!;
    bool OptionBookedDisabled => model.Result != TaskBookSupplierDto.TaskResult.Booked;
    bool OptionRefusedDisabled => model.Result != TaskBookSupplierDto.TaskResult.Refused;
    bool OptionRescheduledDisabled => model.Result != TaskBookSupplierDto.TaskResult.Rescheduled;
    string? errorMessage;

    async Task ValidSubmit()
    {
        errorMessage = null;

        var result = await Api.BookSupplier(ServiceBooking.Id, model);
        if (result is PostResponse.Success)
        {
            await OnCompleted.InvokeAsync(true);
        }
        else
        {
            messageStore.Clear();

            if (result is PostResponse.UnprocessableEntity ue)
            {
                foreach (var error in ue.ValidationErrors)
                {
                    messageStore.Add(editContext.Field(error.Key), error.Value);
                }
            }
            else
            {
                if (result is PostResponse.BadRequest br)
                {
                    messageStore.Add(editContext.Field(""), br.ErrorMessage);
                }
                else// if (result is PostResponse.Failure)
                {
                    messageStore.Add(editContext.Field(""), "There was a problem sending your request.");
                }
            }
            
            editContext.NotifyValidationStateChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(ServiceBooking);
        if (!OnCompleted.HasDelegate) throw new ArgumentNullException(nameof(OnCompleted));

        var refusalReasons = Api.GetRefusalReasons(ServiceBooking.CompanyCode);
        var rescheduleReasons = Api.GetRescheduleReasons(ServiceBooking.CompanyCode);

        await Task.WhenAll(refusalReasons, rescheduleReasons);

        refusalReasonOptions = UIOptions.BuildRefusalReasonOptions(refusalReasons.Result);
        rescheduleReasonOptions = UIOptions.BuildRescheduleReasonOptions(rescheduleReasons.Result);

        editContext = new(model);
        messageStore = new(editContext);
        isLoaded = true;
    }
}
