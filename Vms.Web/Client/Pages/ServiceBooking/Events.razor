@inject ServerApiHttpClient Http

<section class="tabpage_events">
    @if (loadingException is not null)
    {
        <RetryLoad Exception="loadingException" OnRetry="Refresh" />
    }
    else
    {
        @* <button type="button" disabled="@isLoadingFromApi" @onclick="Refresh">Refresh</button> *@
        
        <table>
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Due</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @if (vehicleEvents is not null)
                {
                    for (int index = 0; index < vehicleEvents.Count(); index++)
                    {
                        var idx = index;
                        var item = vehicleEvents.ElementAt(index);
                        <tr>
                            <td>@item.TypeString</td>
                            <td>@item.Due</td>
                            <td>@item.Description</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</section>
@* @if (ServiceBooking.MotEvent_Id is not null)
{
    <RelatedItem TypeName="Mot" Item="ServiceBooking" Context="ServiceBooking">
        <IconContent>
            <div class="entity-svg-mot">
                <svg viewBox="0 0 512 512">
                    <use xlink:href="icons/solid.svg#list-check" />
                </svg>
            </div>
        </IconContent>
        <Buttons>
            <button @onclick="() => runTask = 1">Complete</button>
        </Buttons>
        <ItemTemplate>
            <div class="content-header">
                <h1><a href="/motevent/view/@ServiceBooking.MotEvent_Id">Mot</a></h1>
            </div>
            <dl>
                <dt>Due:</dt>
                <dd>@ServiceBooking.MotEvent_Due</dd>
            </dl>
        </ItemTemplate>
    </RelatedItem>
}
@if (runTask == 1)
{
    <TaskChangeMotStatus OnCompleted="TaskCompleted" ServiceBooking="ServiceBooking" />
} *@

@code {
    [CascadingParameter] TabControl TabControl { get; set; } = null!;
    [CascadingParameter] TabPage TabPage { get; set; } = null!;

    [Parameter, EditorRequired] public ServiceBookingFullDto ServiceBooking { get; set; } = null!;
    //[Parameter, EditorRequired] public EventCallback<int> RunTask { get; set; }

    bool IsActive => TabControl.ActivePage == TabPage;
    bool loaded;
    Exception? loadingException;
    List<EventSelect>? vehicleEvents;
    bool isLoadingFromApi;

    void TaskCompleted(bool save)
    {
        runTask = null;
    }

    int? runTask;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ServiceBooking);
        //if (!RunTask.HasDelegate) throw new ArgumentNullException(nameof(RunTask));
    }

    async Task Refresh()
    {
        loadingException = null;
        isLoadingFromApi = true;
        try
        {
            var events = await Http.GetEvents(ServiceBooking.VehicleId, ServiceBooking.Id);

            vehicleEvents = events.Mots.Select(m => new EventSelect(m.Id, EventSelectType.Mot, m.Due, ""))
                .ToList();

            loaded = true;
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
        finally
        {
            isLoadingFromApi = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loaded && IsActive)
        {
            await Refresh();
            StateHasChanged();
        }
    }

    enum EventSelectType { Mot, Service, Repair }
    record EventSelect(Guid Id, EventSelectType Type, DateOnly Due, string Description)
    {
        public bool Selected { get; set; }
        public string TypeString => Type switch
        {
            EventSelectType.Mot => "Mot",
            EventSelectType.Service => "Service",
            EventSelectType.Repair => "Repair",
            _ => "Unknown"
        };
    }
}
