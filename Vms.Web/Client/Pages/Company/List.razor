@page "/company/list"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<List> Logger

<PageTitle>Companies</PageTitle>

<section class="list-card">
    <div class="list-header">
        <div class="list-control">
            <div class="list-icon">
                <div class="entity-svg-company">
                    <IconBuilding/>
                </div>
            </div>
            <div class="list-kind">
                <h1>Companies</h1>
                <div class="list-dropdown-holder">
                    <h2>
                        <SelectOnlyCombobox Items="listOptions" Label="List" LabelHidden="true"
                                            @bind-SelectedValue="selectedList" @bind-SelectedValue:after="Refresh" class="header-combo" />
                    </h2>
                </div>
            </div>
            <div class="list-buttons btn-group">
                <button onclick="@(() => NavigationManager.NavigateTo("/company/create"))">New</button>
                <button>Import</button>
                <button>Add to Campaign</button>
            </div>
        </div>
        <div class="list-info">
            <div class="list-description">
                <Paginator State="pagination">

                </Paginator>
            </div>
            <div class="list-info-buttons">
                <button>
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#download" />
                    </svg>
                </button>
                <button>
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#gear" />
                    </svg>
                </button>
                <button title="Refresh" @onclick="Refresh" disabled="@error">
                    <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                        <use xlink:href="icons/solid.svg#arrow-rotate-right" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div class="list-data">
        @if (error)
        {
            <div class="error">
                <p>An error has occured.</p>
                <button @onclick="Refresh">Retry</button>
            </div>
        }
        else
        {
            <QuickGrid @ref="grid" ItemsProvider="listProvider" Pagination="pagination">
                <TemplateColumn Title="Code">
                    <a href="/companies/view/@context.Code">@context.Code</a>
                </TemplateColumn>
                <PropertyColumn Property="p=>p.Name" />
            </QuickGrid>
        }
    </div>
</section>

@code {
    QuickGrid<CompanyListModel> grid = null!;

    bool error;
    int? selectedList = 0;

    async Task Refresh() => await grid.RefreshDataAsync();

    List<SelectOption<int?>> listOptions = new()
    {
        new (0, "All Companies"),
        new (1, "Recently Viewed"),
        new (2, "Pinned"),
    };

    GridItemsProvider<CompanyListModel> listProvider = null!;
    PaginationState pagination = new() { ItemsPerPage = 10 };

    protected override void OnInitialized()
    {
        listProvider = async req =>
        {
            try
            {
                var response = await Http.GetFromJsonAsync<List<CompanyListModel>>($"/api/Company?list={selectedList}&start={req.StartIndex}&take={req.Count}");
                if (response is null)
                    throw new InvalidOperationException("Failed to load data.");
                error = false;
                return GridItemsProviderResult.From(response, 10);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load data.");

                error = true;
                StateHasChanged();
                return GridItemsProviderResult.From(Enumerable.Empty<CompanyListModel>().ToList(), 10);
            }
        };
    }
}
