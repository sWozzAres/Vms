@page "/company/view/{code}"
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>View</PageTitle>

@{
    var name = company is not null ? company.Name : ""; 
}
<ViewTemplate Title="Company" Name="@name">
    <Icon>
        <div class="purple">
            <svg viewBox="0 0 384 512">
                <use xlink:href="icons/solid.svg#building" />
            </svg>
        </div>
    </Icon>
    <HeaderButtons>
        <button>Test</button>
    </HeaderButtons>
    <Content>
        @if (company is not null)
        {
            var apiUrl = $"api/Company/{Code}";

            <EditFormTemplate TModel="CompanyModel" ApiUrl="@apiUrl">
                <DataAnnotationsValidator />

                <div class="form-section">
                    <label for="name">Code</label>
                    <InputText id="name" @bind-Value="company.Code" />
                    <ValidationMessage For="@(() => company.Code)" />


                    <label for="email">Name</label>
                    <InputText id="email" @bind-Value="company.Name" />
                    <ValidationMessage For="@(() => company.Name)" />
                </div>
            </EditFormTemplate>
        }
    </Content>
</ViewTemplate>

@code {
    [Parameter]
    public string Code { get; set; } = null!;

    private CompanyModel company = null!;

    protected override async Task OnParametersSetAsync()
    {
        //return base.OnParametersSetAsync();
        var result = await Http.GetFromJsonAsync<CompanyModel>($"api/Company/{Code}");

        if (result is not null)
        {
            company = result;
            //StateHasChanged();
        }
    }
}
