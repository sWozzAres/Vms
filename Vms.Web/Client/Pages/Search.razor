@page "/search"
@inject IJSRuntime JSRuntime
@inject ILogger<Search> Logger
@inject ServerApiHttpClient Api

<PageTitle>Search</PageTitle>

<section class="search-page">
    <div class="search-page-header">
        <h1>Search Results</h1>
        <h2>@SearchString</h2>
    </div>

    @if (results is not null)
    {
        <QuickGrid @ref="grid" Items="results" TGridItem="EntityTagDto">
            <PropertyColumn Property="x=>x.KindString" Title="Type" />
            <TemplateColumn Title="Name">
                <a href="@Url(context)/@context!.Key">@context.Name</a>
            </TemplateColumn>
        </QuickGrid>
    }
</section>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "SearchString")]
    public string SearchString { get; set; } = null!;

    QuickGrid<EntityTagDto> grid = null!;
    IQueryable<EntityTagDto>? results;

    string Url(EntityTagDto tag) => tag.Kind switch
    {
        EntityTagKindDto.Company => "/company/view",
        EntityTagKindDto.Fleet => "/fleet/view",
        EntityTagKindDto.Vehicle => "/vehicle/view",
        EntityTagKindDto.Customer => "/customer/view",
        EntityTagKindDto.Network => "/network/view",
        EntityTagKindDto.Supplier => "/supplier/view",
        EntityTagKindDto.ServiceBooking => "/servicebooking/view",
        EntityTagKindDto.Driver => "/driver/view",
        _ => throw new NotSupportedException($"Unknown kind '{tag.Kind}'.")
    };

    protected override async Task OnParametersSetAsync()
    {
        results = (await Api.Search(SearchString)).AsQueryable();
    }
}