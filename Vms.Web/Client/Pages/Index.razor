@page "/"
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations;

<PageTitle>Index</PageTitle>
<section>
    <h1>Home</h1>
    <button @onclick="SignOut">Sign out</button>
    @* <DropdownButton OnSelectCallback="async (value) => SelectedValue = value" class="mydropdown">
    <ButtonContent>Click Me!</ButtonContent>
    <ChildContent>
    <DropdownItem Value="1">Item 1</DropdownItem>
    <DropdownItem Value="2">Item 2</DropdownItem>
    <DropdownItem Value="3">Item 3</DropdownItem>
    </ChildContent>
    </DropdownButton>

    <DropdownButton OnSelectCallback="async (value) => SelectedValue = value" class="mydropdown2">
    <ButtonContent>
    <div class="holder">
    <svg viewBox="0 0 448 512">
    <use xlink:href="icons/solid.svg#user" />
    </svg>
    User
    </div>
    </ButtonContent>
    <ChildContent>
    <DropdownItem Value="1">
    <div class="holder">
    <svg viewBox="0 0 448 512" fill="red">
    <use xlink:href="icons/solid.svg#user" />
    </svg>
    User
    </div>
    </DropdownItem>
    <DropdownItem Value="2">
    <div class="holder">
    <svg viewBox="0 0 448 512" fill="green">
    <use xlink:href="icons/solid.svg#user" />
    </svg>
    User
    </div>
    </DropdownItem>
    <DropdownItem Value="3">
    <div class="holder">
    <svg viewBox="0 0 448 512">
    <use xlink:href="icons/solid.svg#user" />
    </svg>
    User
    </div>
    </DropdownItem>
    </ChildContent>
    </DropdownButton> *@


    @* <div style="display:flex">
    <MenuButton Items="@items" OnSelectCallback="(val) => selectedItem = val">
    Actions
    </MenuButton>


    </div> *@
    @* OnItemSelected="(i) => selectedItem = items[i]"> *@
    <h2>

        <SelectOnlyCombobox Items="@items" Label="Select Fruit"
        @bind-SelectedValue="SelectedValue" class="header-combo">
        </SelectOnlyCombobox>
    </h2>
    <p>SelectedValue: @SelectedValue</p>


@*     <EditFormTemplate Model="Model" ApiUrl="">
        <DataAnnotationsValidator />

        <div class="form-section">
            <InputSelectOnlyCombobox Options="@items" LabelText="A label" @bind-Value="Model.SelectedValue" />
            <ValidationMessage For="@(() => Model.SelectedValue)" />

            
        </div>
    </EditFormTemplate> *@
    <p>SelectedValue: @Model.SelectedValue</p>

    <ol>
        <li><a href="/test/1">Test</a></li>
        <li><a href="/fetchdata">Fetch</a></li>
        <li><a href="/typography">Typography</a></li>
        <li><a href="/buttons">Buttons</a></li>
        <li><a href="/people/create">Create Person</a></li>
        <li><a href="/people/view/1">Edit Person</a></li>
    </ol>

    <ul>
        <li>
            Companies
            <ul>
                <li><a href="/company/create">Create</a></li>
                <li><a href="/company/list">List</a></li>
            </ul>
        </li>
    </ul>

    <ul>
        <li>
            Vehicles
            <ul>
                <li><a href="/vehicle/create">Create</a></li>
                <li><a href="/vehicle/list">List</a></li>
            </ul>
        </li>
    </ul>
</section>

@code {
    void SignOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }

    int? SelectedValue { get; set; }
    private string selectedItem = string.Empty;

    private SelectOption<int?>[] items = new SelectOption<int?>[]
    {
        new (null, "--Choose a Fruit--"),
        new (1, "Apple"),
        new (2, "Banana"),
        new (3, "Blueberry"),
        new (4, "Boysenberry"),
        new (5, "Cherry"),
        new (6, "Cranberry"),
        new (7, "Durian"),
        new (8, "Eggplant"),
        new (9, "Fig"),
        new (10, "Grape"),
        new (111, "Guava"),
        new (122, "Huckleberry")
    };

    public MyModel Model { get; set; } = new();

    public class MyModel : ICopyable<MyModel>
    {
        [Range(1, 122)]
        public int? SelectedValue { get; set; } = 0;

        [Required]
        public string Name { get; set; } = "Mark";

        public void CopyFrom(MyModel source)
        {
            SelectedValue = source.SelectedValue;
            Name = source.Name;
        }
    }
}