@page "/"
@inject NavigationManager Navigation
@inject ILogger<Index> Logger
@using System.ComponentModel.DataAnnotations;
@using Markdig;

<PageTitle>Index</PageTitle>

<section class="page">
    <h1>Home</h1>
    <button @onclick="SignOut">Sign out</button>
    <ol>
        <li><a href="/chat">Chat</a></li>
        <li><a href="/claims">Claims</a></li>
        <li><a href="/typography">Typography</a></li>
        <li><a href="/buttons">Buttons</a></li>
    </ol>

    <ul>
        <li>
            Companies
            <ul>
                <li><a href="/company/create">Create</a></li>
                <li><a href="/company/list">List</a></li>
            </ul>
        </li>
    </ul>

    <ul>
        <li>
            Vehicles
            <ul>
                <li><a href="/vehicle/list">List</a></li>
            </ul>
        </li>
    </ul>
    <ul>
        <li>
            Service Bookings
            <ul>
                <li><a href="/servicebooking/list">List</a></li>
            </ul>
        </li>
    </ul>
</section>

@code {
    void SignOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }

    int? SelectedValue { get; set; }
    private string selectedItem = string.Empty;

    private List<SelectOption<int?>> items = new ()
    {
        new (null, "--Choose a Fruit--"),
        new (1, "Apple"),
        new (2, "Banana"),
        new (3, "Blueberry"),
        new (4, "Boysenberry"),
        new (5, "Cherry"),
        new (6, "Cranberry"),
        new (7, "Durian"),
        new (8, "Eggplant"),
        new (9, "Fig"),
        new (10, "Grape"),
        new (111, "Guava"),
        new (122, "Huckleberry")
    };

    string MarkdownText = string.Empty;
    string MarkdownSource = string.Empty;

    public class MarkDigModel
    {
        public string Markdown { get; set; } = string.Empty;
    }

    public MarkDigModel Model { get; set; } = new();


    public void MarkdownChanged(string value)
    {
        var newValue = value ?? string.Empty;
        MarkdownSource = newValue;

        MarkdownText = Markdown.ToHtml(newValue);
        Logger.LogInformation("{a} {b}", Model.Markdown, MarkdownText);
    }

    public class MyModel : ICopyable<MyModel>
    {
        [Range(1, 122)]
        public int? SelectedValue { get; set; } = 0;

        [Required]
        public string Name { get; set; } = "Mark";

        public void CopyFrom(MyModel source)
        {
            SelectedValue = source.SelectedValue;
            Name = source.Name;
        }
    }
}