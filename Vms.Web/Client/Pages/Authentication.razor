@page "/authentication/{action}"
@inject ILogger<Authentication> Logger
@inject HttpClient Http
@inject HubConnection HubConnection

<RemoteAuthenticatorView @ref="authenticator" Action="@Action" OnLogInSucceeded="LoginSucceeded" />

@code{
    [Parameter] public string? Action { get; set; }
    RemoteAuthenticatorView authenticator = null!;

    async Task LoginSucceeded()
    {
        Logger.LogInformation("Login succeeded.");

        await StartSignalR();
        await RegisterLogin();
    }

    async Task RegisterLogin()
    {
        try
        {
            var response = PostResponse.Create(await Http.PostAsJsonAsync($"api/app/register", new { }));
            if (response is not PostResponse.Success)
            {
                throw new InvalidOperationException("Register login was unsuccesfull.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to register login.");
            //TODO logout
        }
    }

    async Task StartSignalR()
    {
        try
        {
            await HubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start the signalR connection.");
        }
    }
}
