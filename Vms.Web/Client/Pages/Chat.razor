@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable
@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@using System.IdentityModel.Tokens.Jwt

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="send-container">
            <input id="newmessage" @bind="messageInput" size="50" placeholder="Enter message..." />
            <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
        </div>
        <div class="messages">
            @foreach (var message in messages.OrderByDescending(m => m.ReceivedTime))
            {
                <div class="message">
                    <h4>@message.UserName</h4>
                    <p>@message.Text</p>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    HubConnection? hubConnection;
    List<ReceivedMessage> messages = new();
    string? userName;
    string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState is null)
            throw new InvalidOperationException("Failed to get authentication state.");

        userName = authState.User.Identity?.Name;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var accessTokenResult = await TokenProvider.RequestAccessToken();
                    if (accessTokenResult.TryGetToken(out var token))
                    {
                        return token.Value;
                    }
                    else
                    {
                        throw new InvalidOperationException("Failed to get access token.");
                    }
                };
            })
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add(new ReceivedMessage(user, message));
            StateHasChanged();
        });

        hubConnection.On("ReceiveNotification", () =>
           {
               messages.Add(new ReceivedMessage("System", "Notification"));
               StateHasChanged();
           });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userName, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    class ReceivedMessage(string userName, string text)
    {
        public string UserName { get; set; } = userName;
        public string Text { get; set; } = text;
        public DateTime ReceivedTime { get; set; } = DateTime.Now;

    }
}