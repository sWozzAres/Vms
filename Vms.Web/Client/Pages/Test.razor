@page "/test/{msg}"
@inject ILogger<Test> Logger

<h3>Test</h3>

<p>
    @msg
</p>
<a href="/test/@HtmlHelpers.GetRandomHtmlId(10)">Hello</a>

<EditForm Model="@Model">
    <InputText @bind-Value="Model.Name"></InputText>

</EditForm>

<FormTemplate Model="@Model2">
    <InputText @bind-Value="Model2.Name"></InputText>
</FormTemplate>

@code {
    [Parameter]
    public string msg { get; set; } = null!;

    public TestModel Model { get; set; } = new() { Name = "1" };
    public TestModel Model2 { get; set; } = new() { Name = "2" };

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogInformation("SetParametersAsync()");
        await base.SetParametersAsync(parameters);
        //await Task.Delay(1000);
    }
    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized()");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync()");
        await base.OnInitializedAsync();
        //await Task.Delay(1000);
    }
    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet()");
        base.OnParametersSet();
    }
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync()");
        await base.OnParametersSetAsync();
        //await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("OnAfterRender({firstRender})", firstRender);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync({firstRender})", firstRender);
        await base.OnAfterRenderAsync(firstRender);
        //await Task.Delay(1000);
    }

    public record TestModel
    {
        public string Name { get; set; } = null!;
    }
}