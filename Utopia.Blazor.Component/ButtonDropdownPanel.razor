@implements IDisposable
@inject NavigationManager Navigation
<div id="@Id" class="container @ClassName">
    <div class="wrapper">
        <button id="@Id-button" @onclick="ButtonClicked" aria-haspopup="true" aria-controls="@Id-menu" aria-expanded="@expanded.ToHtml()">
            @ButtonContent
        </button>
        <div id="@Id-menu" class="@panelClassName" aria-labelledby="@Id-button">
            @PanelContent
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public RenderFragment ButtonContent { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment PanelContent { get; set; } = null!;
    [Parameter]public string? ClassName { get; set; }
    public enum Alignment { Left, Right };
    [Parameter]
    public Alignment Align { get; set; } = Alignment.Left;

    bool expanded;
    string panelClassName => string.Join(" ", "panel", expanded ? "" : "hidden", Align == Alignment.Right ? "right" : "").Trim();
    string Id = HtmlHelpers.GetRandomHtmlId(10);

    void ButtonClicked()
    {
        expanded = !expanded;
    }

    void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        expanded = false;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += LocationChanged;
    }
    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }
}
