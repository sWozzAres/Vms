@page "/product/view/{Id:guid}"
@inject HttpClient Http
@inject NavigationManager Navigation

@if (product is not null)
{
    <PageTitle>@product.Name</PageTitle>

    <h1>Product</h1>
    <h2>@product.Name</h2>

    <EditFormTemplate @ref="form" OnLoad="Load" OnSave="SaveAsync">
        <div class="col-12">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="form.Model.Name" />
            <ValidationMessage For="@(() => form.Model.Name)" />
        </div>
    </EditFormTemplate>
}

@code {
    [Parameter, EditorRequired] public Guid Id { get; set; }

    EditFormTemplate<UpdateProductRequest> form = null!;
    ProductFullDto product = null!;

    async Task<HttpResponseMessage> SaveAsync(UpdateProductRequest model)
        => await Http.PostAsJsonAsync($"/api/product/{Id}", model);

    UpdateProductRequest Load()
        => new(product.Name);

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(Id);

        product = await Http.GetFromJsonAsync<ProductFullDto>($"/api/product/{Id}")
            ?? throw new InvalidOperationException("Failed to load.");
    }
}
