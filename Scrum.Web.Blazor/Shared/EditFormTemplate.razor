@typeparam TModel where TModel: class

@if (Model is not null)
{
    <EditForm EditContext="editContext" OnValidSubmit="ValidSubmit" class="row g-3">
        <DataAnnotationsValidator />
        <fieldset disabled="@FormIsDisabled">
            @ChildContent
        </fieldset>

        <div class="col-12">
            <button type="button" class="btn btn-secondary" @onclick="ToggleEditing">@(isDisabled ? "Edit" : "Cancel")</button>
            <button type="submit" class="btn btn-primary" disabled="@FormIsDisabled" @onclick="() => messageStore.Clear()">Save Changes</button>
        </div>
        <ValidationSummary />
    </EditForm>
}

@code {
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    //[Parameter, EditorRequired] public Guid Id { get; set; }
    //[Parameter, EditorRequired] public string Url { get; set; } = null!;
    public delegate TModel LoadModel();
    [Parameter, EditorRequired] public LoadModel OnLoad { get; set; } = null!;
    public delegate Task<HttpResponseMessage> SaveModel(TModel model);
    [Parameter, EditorRequired] public SaveModel OnSave { get; set; } = null!;

    public TModel Model = null!;
    string originalModel = null!;

    EditContext editContext { get; set; } = null!;
    ValidationMessageStore messageStore = null!;

    bool isDisabled = true;
    bool isPosting = false;
    bool FormIsDisabled => isDisabled || isPosting;

    void ToggleEditing()
    {
        isDisabled = !isDisabled;
        if (isDisabled)
        {
            // restore form
            Model = JsonSerializer.Deserialize<TModel>(originalModel)
                ?? throw new InvalidOperationException("Failed to deserialize model data.");

            editContext = new EditContext(Model);
            messageStore = new ValidationMessageStore(editContext);
        }
    }

    async Task ValidSubmit()
    {
        isPosting = true;
        try
        {
            //var response = PostResponse.Create(await Http.PostAsJsonAsync($"/api/product/{Id}", Model));
            var response = PostResponse.Create(await OnSave(Model));
            if (response is PostResponse.Success)
            {
                isDisabled = true;
            }
            else
            {
                response.HandleResponseFailure(editContext, messageStore);
            }
        }
        finally
        {
            isPosting = false;
        }
    }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ChildContent);
        //if (Id == Guid.Empty) throw new ArgumentNullException($"You must specify a value for '{nameof(Id)}.");
        //ArgumentNullException.ThrowIfNull(Url);
        ArgumentNullException.ThrowIfNull(OnSave);
        ArgumentNullException.ThrowIfNull(OnLoad);

        Model = OnLoad();

        editContext = new EditContext(Model);
        messageStore = new ValidationMessageStore(editContext);

        originalModel = JsonSerializer.Serialize<TModel>(Model);
    }
}
