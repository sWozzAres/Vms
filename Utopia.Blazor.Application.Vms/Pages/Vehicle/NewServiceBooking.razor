
@inject ServiceBookingApiClient Api
@inject ServerApiHttpClient Http
@inject VehicleApiClient VehicleApi
@inject ILogger<NewServiceBooking> Logger
@inject NavigationManager NavigationManager

<Dialog AutoShow="Dialog.ShowMode.ShowModal" ClassName="list-selector scroll-content">
    <EditForm Model="Model" OnValidSubmit="OkDialog">
        <div class="dialog-container">
            <div class="dialog-header">
                <h1>New Service Booking</h1>
            </div>
            <div class="dialog-content">
                @if (loadException is not null)
                {
                    <RetryLoad Exception="loadException" OnRetry="LoadEvents" />
                }
                else
                {
                    <table>
                        <thead>
                            <tr>
                                <th></th>
                                <th>Event</th>
                                <th>Due</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (vehicleEvents is not null)
                            {
                                for (int index = 0; index < vehicleEvents.Count(); index++)
                                {
                                    var idx = index;
                                    var item = vehicleEvents.ElementAt(index);
                                    <tr @onclick="() => SelectItem(idx)">
                                        <td><input checked="@isSelected(idx)" type="checkbox" /></td>
                                        <td>@item.TypeString</td>
                                        <td>@item.Due</td>
                                        <td>@item.Description</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <div class="dialog-form-controls">
                        <div class="form-control">
                            <label for="autoassign">Auto Assign</label>
                            <InputCheckbox id="autoassign" @bind-Value="Model.AutoAssign" />
                        </div>
                        <div class="form-control">
                            <InputSelectOnlyCombobox Options="@serviceLevelOptions" LabelText="Service Level" @bind-Value="Model.ServiceLevel" />
                            <ValidationMessage For="@(() => Model.ServiceLevel)" />
                            </div>
                    </div>
                }
            </div>
            <div class="dialog-footer">
                <div class="dialog-controls">
                    <button @onclick="CloseDialog" disabled="@formIsDisabled">Close</button>
                    <button type="submit" disabled="@isOkButtonDisabled">OK</button>
                </div>
                @if (okErrorMessage is not null)
                {
                    <p class="error">@okErrorMessage</p>
                }
            </div>
        </div>
    </EditForm>
</Dialog>

@code {
    [Parameter, EditorRequired] public Guid Id { get; set; }
    [Parameter, EditorRequired] public EventCallback OnClose { get; set; }

    class CreateBookingModel
    {
        public bool AutoAssign { get; set; }
        [Range(typeof(ServiceLevelDto), nameof(ServiceLevelDto.Mobile), nameof(ServiceLevelDto.DropOffWithCourtesyCar),
        ErrorMessage = "You must select a service level.")]
        public ServiceLevelDto ServiceLevel { get; set; }
    }
    CreateBookingModel Model { get; set; } = new();

    bool formIsDisabled;
    string? okErrorMessage;
    Exception? loadException;
    bool isOkButtonDisabled => vehicleEvents is null ? true : !vehicleEvents.Any(e => e.Selected);
    List<EventSelect>? vehicleEvents;
    List<SelectOption<ServiceLevelDto>> serviceLevelOptions = null!;

    void SelectItem(int index)
    {
        var element = vehicleEvents!.ElementAt(index);
        element.Selected = !element.Selected;
    }

    bool isSelected(int index) => vehicleEvents!.ElementAt(index).Selected;

    async Task CloseDialog() => await OnClose.InvokeAsync();
    async Task OkDialog()
    {
        formIsDisabled = true;
        try
        {
            var motId = vehicleEvents!.FirstOrDefault(e => e.Type == EventSelectType.Mot && e.Selected)?.Id;

            var request = new CreateServiceBookingCommand(Id,
                null,
                null,
                null,
                Model.AutoAssign,
                motId, null, null);

            var result = await Api.CreateServiceBookingAsync(request);
            if (result is PostResponse.Created)
            {
                var serviceBooking = await result.Response.Content.ReadFromJsonAsync<ServiceBookingDto>()
                    ?? throw new InvalidOperationException("Failed to deserialize response.");

                NavigationManager.NavigateTo($"/servicebooking/view/{serviceBooking.Id}");
            }
            else if (result is PostResponse.UnprocessableEntity ue)
            {
                //TODO should never happen but if it does should we show errors? Probably not.
                throw new InvalidOperationException("Validation error.");
            }
            else if (result is PostResponse.BadRequest br)
            {
                throw new VmsDomainException(br.ErrorMessage);
            }
            else// if (result is PostResponse.Failure)
            {
                throw new InvalidOperationException("There was a problem sending your request.");
            }

        }
        catch (VmsDomainException ex)
        {
            okErrorMessage = ex.Message;
            Logger.LogError(ex, okErrorMessage);
        }
        catch (Exception ex)
        {
            okErrorMessage = "An error occurred while trying to create the service booking.";
            Logger.LogError(ex, okErrorMessage);
        }
        finally
        {
            formIsDisabled = false;
        }
    }

    async Task LoadEvents()
    {
        loadException = null;
        vehicleEvents = null;
        try
        {
            var events = await VehicleApi.GetEvents(Id);

            vehicleEvents = events.Mots.Select(m => new EventSelect(m.Id, EventSelectType.Mot, m.Due, ""))
                .ToList();

            // openEvents = new();
            // foreach (var ev in events.Mots)
            // {
            //     openEvents.Add(new EventSelect(ev.Id, EventSelectType.Mot, ""));
            // }

            //TODO service, repair etc
        }
        catch (Exception ex)
        {
            loadException = ex;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id == Guid.Empty) throw new ArgumentNullException(nameof(Id));
        if (!OnClose.HasDelegate) throw new ArgumentNullException(nameof(OnClose));

        serviceLevelOptions = UIOptions.GetServiceLevelOptions();

        await LoadEvents();
    }

    enum EventSelectType { Mot, Service, Repair }
    record EventSelect(Guid Id, EventSelectType Type, DateOnly Due, string Description)
    {
        public bool Selected { get; set; }
        public string TypeString => Type switch
        {
            EventSelectType.Mot => "Mot",
            EventSelectType.Service => "Service",
            EventSelectType.Repair => "Repair",
            _ => "Unknown"
        };
    }
}
