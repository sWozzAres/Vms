@inject ServiceBookingApiClient Api
@inject NavigationManager NavigationManager
@inject ILogger<WorkList> Logger;

<button @onclick="NewServiceBooking">New</button>

@if (serviceBookings is not null)
{
    foreach (var serviceBooking in serviceBookings)
    {
        <RelatedItem TypeName="Service Booking" Item="serviceBooking" Context="sb">
            <IconContent>
                <div class="svg-medium svg-servicebooking">
                    <img alt="Service Booking" src="icons/servicebooking.svg" />
                </div>
            </IconContent>
            <Buttons>
                <button>Open</button>
            </Buttons>
            <ItemTemplate>

                <div class="content-header">
                    <h1><a href="/servicebooking/view/@sb.Id">@sb.Ref</a></h1>
                    @* <MenuButton Items="@driverOptions" Align="MenuButton.Alignment.Right"
            OnSelectCallback="(val) => OptionSelected(val, customer)" /> *@
                </div>
                <dl>
                    <dt>Id:</dt>
                    <dd>@sb.Id</dd>
                </dl>

            </ItemTemplate>
        </RelatedItem>
    }
}

@if (createNewServiceBooking)
{
    <NewServiceBooking Id="Id" OnClose="() => createNewServiceBooking = false" />
}

@code {
    [CascadingParameter] TabControl TabControl { get; set; } = null!;
    [CascadingParameter] TabPage TabPage { get; set; } = null!;

    [Parameter, EditorRequired] public Guid Id { get; set; }

    bool createNewServiceBooking;
    bool IsActive => TabControl.ActivePage == TabPage;
    List<ServiceBookingFullDto>? serviceBookings;

    void NewServiceBooking() => createNewServiceBooking = true;
    

    protected override void OnInitialized()
    {
        if (Id == Guid.Empty) throw new InvalidOperationException($"You must supply the '{nameof(Id)}' parameter.");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (serviceBookings is null && IsActive)
        {
            serviceBookings = await Api.GetServiceBookingsForVehicleFullAsync(Id);
            StateHasChanged();
        }
    }
}
