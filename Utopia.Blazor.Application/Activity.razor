@using Markdig;
@inject ServerApiHttpClient Api

<section class="activitylog">
    @if (loadingException is not null)
    {
        <RetryLoad Exception="loadingException" OnRetry="Refresh" />
    }
    else
    {
        <div class="buttons">
            <button type="button" disabled="@buttonsDisabled" @onclick="Refresh">Refresh</button>
        </div>

        @if (entries is not null)
        {
            @foreach (var entry in entries.OrderByDescending(e => e.EntryDate))
            {
                <article class="activity-entry">
                    <footer>
                        <time datetime="@entry.EntryDate.ToLocalTime().ToString("s")">@entry.EntryDate.ToLocalTime().ToString("f")</time>
                        - <span class="username">@entry.UserName</span>
                    </footer>
                    @((MarkupString)Markdown.ToHtml(entry.Text))
                </article>
            }
        }
    }
</section>

@code {
    [CascadingParameter] TabControl TabControl { get; set; } = null!;
    [CascadingParameter] TabPage TabPage { get; set; } = null!;

    [Parameter, EditorRequired] public Guid Id { get; set; }
    public delegate Task<List<ActivityLogDto>?> LoadActivities(Guid id);
    //public delegate Task<PostResponse> AddNote(Guid id, string note);
    [Parameter, EditorRequired] public LoadActivities OnLoadActivities { get; set; } = null!;
    //[Parameter, EditorRequired] public AddNote OnAddNote { get; set; } = null!;

    bool IsActive => TabControl.ActivePage == TabPage;
    List<ActivityLogDto> entries = new();
    //NoteModel noteModel = new();
    bool buttonsDisabled => isWaitingForApi;
    bool isWaitingForApi;
    bool loaded;
    Exception? loadingException;
   
    async Task Refresh()
    {
        loadingException = null;
        isWaitingForApi = true;
        try
        {
            entries = await OnLoadActivities(Id) ?? throw new InvalidOperationException("Failed to load activities.");
            loaded = true;
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
        finally
        {
            isWaitingForApi = false;
        }
    }

    // public async Task HandleValidSubmit()
    // {
    //     isWaitingForApi = true;
    //     try
    //     {
    //         var response = await OnAddNote(Id, noteModel.Note);
    //         if (response is PostResponse.Created)
    //         {
    //             var result = await response.Response.Content.ReadFromJsonAsync<ActivityLogDto>()
    //                 ?? throw new InvalidOperationException("Failed to read response.");

    //             entries.Add(result);
    //             noteModel.Note = string.Empty;
    //         }
    //     }
    //     finally
    //     {
    //         isWaitingForApi = false;
    //     }
    // }

    protected override void OnInitialized()
    {
        if (Id == Guid.Empty) throw new ArgumentNullException(nameof(Id));
        ArgumentNullException.ThrowIfNull(OnLoadActivities);
        //ArgumentNullException.ThrowIfNull(OnAddNote);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loaded && IsActive)
        {
            await Refresh();
            StateHasChanged();
        }
    }


    // class NoteModel
    // {
    //     [Required, StringLength(1024)]
    //     public string Note { get; set; } = string.Empty;
    // }
}
