@inject ILogger<Activity> Logger

<section class="activitylog">
    @if (loadingException is not null)
    {
        <RetryLoad Exception="loadingException" OnRetry="Refresh" />
    }
    else
    {
        <div class="buttons">
            <button type="button" disabled="@buttonsDisabled" @onclick="Refresh">Refresh</button>
        </div>

        @if (entries is not null)
        {
            @foreach (var entry in entries.OrderByDescending(e => e.EntryDate))
            {
                <article class="activity-entry">
                    <footer>
                        <time datetime="@entry.EntryDate.ToLocalTime().ToString("s")">@entry.EntryDate.ToLocalTime().ToString("f")</time>
                        - <span class="username">@entry.UserName</span>
                    </footer>
                    @((MarkupString)Markdown.ToHtml(entry.Text))
                </article>
            }
        }
    }
</section>

@code {
    [CascadingParameter] TabControl TabControl { get; set; } = null!;
    [CascadingParameter] TabPage TabPage { get; set; } = null!;

    [Parameter, EditorRequired] public Guid Id { get; set; }
    public delegate Task<List<ActivityLogDto>?> LoadActivities(Guid id);
    [Parameter, EditorRequired] public LoadActivities OnLoadActivities { get; set; } = null!;

    bool IsActive => TabControl.ActivePage == TabPage;
    List<ActivityLogDto> entries = new();
    bool buttonsDisabled => isWaitingForApi;
    bool isWaitingForApi;
    bool loaded;
    Exception? loadingException;

    async Task Refresh()
    {
        loadingException = null;
        isWaitingForApi = true;
        try
        {
            entries = await OnLoadActivities(Id) ?? throw new InvalidOperationException("Failed to load activities.");
            loaded = true;
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
        finally
        {
            isWaitingForApi = false;
        }
    }

    protected override void OnInitialized()
    {
        if (Id == Guid.Empty) throw new ArgumentNullException(nameof(Id));
        ArgumentNullException.ThrowIfNull(OnLoadActivities);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (loadingException is null && (!loaded && IsActive))
        {
            await Refresh();
            StateHasChanged();
        }
    }
}
