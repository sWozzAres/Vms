@typeparam TGridItem
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<ListTemplate<TGridItem>> Logger
@attribute [CascadingTypeParameter(nameof(TGridItem))]

<PageHeader>
    <IconContent>
        @IconContent
    </IconContent>
    <InfoContent>
        <h1>@Title</h1>
        <div class="list-dropdown-holder">
            <h2>
                <SelectOnlyCombobox Items="Options" Label="List" LabelHidden="true"
                                    @bind-SelectedValue="selectedList" @bind-SelectedValue:after="Refresh" class="header-combo" />
            </h2>
        </div>
    </InfoContent>
    <Buttons>
        @Buttons
    </Buttons>
</PageHeader>

<div class="list-info">
    <div class="list-description">
        <ListPaginator State="pagination" @ref="listPaginator" />
    </div>
    <div class="list-info-buttons">
        <button>
            <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                <use xlink:href="icons/solid.svg#download" />
            </svg>
        </button>
        <button>
            <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                <use xlink:href="icons/solid.svg#gear" />
            </svg>
        </button>
        <button title="Refresh" @onclick="Refresh" disabled="@error">
            <svg class="btn-icon" height="1em" viewBox="0 0 512 512">
                <use xlink:href="icons/solid.svg#arrow-rotate-right" />
            </svg>
        </button>
    </div>
</div>

<div class="list-data">
    @if (error)
    {
        <div class="error">
            <p>An error has occured.</p>
            <button @onclick="Refresh">Retry</button>
        </div>
    }
    else
    {
        <QuickGrid TGridItem="TGridItem" @ref="grid" ItemsProvider="itemsProvider" Pagination="pagination">
            @GridColumns
        </QuickGrid>
    }
</div>

@code {
    [Parameter, EditorRequired] public List<SelectOption<int?>> Options { get; set; } = null!;
    [Parameter, EditorRequired] public string ApiUrl { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment IconContent { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment Buttons { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment GridColumns { get; set; } = null!;
    [Parameter, EditorRequired] public string Key { get; set; } = null!;
    [Parameter, EditorRequired] public string Title { get; set; } = null!;

    GridItemsProvider<TGridItem> itemsProvider { get; set; } = null!;
    PaginationState pagination = new() { ItemsPerPage = 50 };
    QuickGrid<TGridItem> grid = null!;
    int? selectedList = 0;
    ListPageConfig pageConfig = null!;
    ListPaginator listPaginator = default!;

    async Task Refresh()
    {
        await grid.RefreshDataAsync();

        if (selectedList.HasValue)
        {
            pageConfig.ListIndex = selectedList.Value;
            await LocalStorage.SetItemAsync(Key, pageConfig);
        }
    }

    bool error;
    //bool isLoaded;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(Options);
        ArgumentNullException.ThrowIfNull(ApiUrl);
        ArgumentNullException.ThrowIfNull(IconContent);
        ArgumentNullException.ThrowIfNull(Buttons);
        ArgumentNullException.ThrowIfNull(GridColumns);
        ArgumentNullException.ThrowIfNull(Key);
        ArgumentNullException.ThrowIfNull(Title);

        // load page configuration from local storage
        pageConfig = await LocalStorage.GetItemAsync<ListPageConfig>(Key) ?? new();

        // default selected list, if it is a valid option
        if (Options.Select(x => x.Value == pageConfig.ListIndex) is not null)
            selectedList = pageConfig.ListIndex;

        itemsProvider = async req =>
        {
            try
            {
                await listPaginator.StopTimer();

                var response = await Http.GetFromJsonAsync<ListResult<TGridItem>>($"{ApiUrl}?list={selectedList}&start={req.StartIndex}&take={req.Count}")
                    ?? throw new InvalidOperationException("Failed to load data.");

                listPaginator.StartTimer();

                error = false;
                return GridItemsProviderResult.From(response.Items, response.TotalCount);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load data.");

                error = true;
                StateHasChanged();
                return GridItemsProviderResult.From(Enumerable.Empty<TGridItem>().ToList(), 0);
            }
        };
    }
}