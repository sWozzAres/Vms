@using System.Text
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Forms;

@typeparam TModel where TModel : class, ICopyable<TModel>, new()
@inject HttpClient Http
@inject ILogger<EditFormTemplate<TModel>> Logger
@inject NavigationManager NavigationManager

@if (loadingException is not null)
{
    <RetryLoad Exception="loadingException" OnRetry="() => NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true)" />
}
else if (Model is not null)
{
    <EditForm EditContext="@editContext" OnSubmit="HandleSubmit" class="edit-form fullresponse">
        <fieldset disabled="@isDisabled" class="form-grid">
            <CascadingValue Value="isDisabled" Name="IsDisabled">
                @ChildContent
            </CascadingValue>
        </fieldset>
        <div class="buttons">
            <button type="button" @onclick="ToggleEdit">@editButtonText</button>
            <button type="submit" disabled="@(!inEditMode)">Save</button>
        </div>
    </EditForm>
}

@code {
    public delegate TModel LoadModel();
    public delegate Task<PostResponse> SaveModel(TModel model);
    [Parameter, EditorRequired] public LoadModel OnLoad { get; set; } = null!;
    [Parameter, EditorRequired] public SaveModel OnSave { get; set; } = null!;

    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    public TModel Model { get; set; } = null!;

    EditContext editContext { get; set; } = null!;
    ValidationMessageStore messageStore = null!;

    Exception? loadingException;
    TModel originalModel { get; set; } = new();
    bool isPosting { get; set; }
    bool inEditMode { get; set; }
    string editButtonText => inEditMode ? "Cancel" : "Edit";
    bool isDisabled => !inEditMode;

    async Task HandleSubmit()
    {
        Logger.LogInformation("Handling submit form {model}", Model);
        if (editContext is null)
            return;

        if (editContext.Validate())
        {
            Logger.LogInformation("HandleSubmit called: Form is valid");

            // Process the valid form
            // await ...
            //await Task.CompletedTask;
            await HandleValidSubmit();
        }
        else
        {
            var vm = editContext.GetValidationMessages();

            Logger.LogInformation("HandleSubmit called: Form is INVALID: {vm}.", vm);
        }
    }

    void Load()
    {
        try
        {
            Model = OnLoad();
            editContext = new EditContext(Model);
            messageStore = new ValidationMessageStore(editContext);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed.");
            loadingException = ex;
        }
    }

    async Task HandleValidSubmit()
    {
        Logger.LogInformation("Submitting form {model}", Model);
        isPosting = true;
        try
        {
            var result = await OnSave(Model);

            if (result is PostResponse.Success)
            {
                Load();
                
                originalModel.CopyFrom(Model);
                inEditMode = false;
            }
            else
            {
                messageStore.Clear();

                if (result is PostResponse.UnprocessableEntity ue)
                {
                    foreach (var error in ue.ValidationErrors)
                    {
                        messageStore.Add(editContext.Field(error.Key), error.Value);
                    }
                }
                else
                {
                    if (result is PostResponse.BadRequest br)
                    {
                        messageStore.Add(editContext.Field(""), br.ErrorMessage);
                    }
                    else// if (result is PostResponse.Failure)
                    {
                        messageStore.Add(editContext.Field(""), "There was a problem sending your request.");
                    }
                }

                editContext.NotifyValidationStateChanged();
            }
        }
        finally
        {
            isPosting = false;
        }
    }

    private void ToggleEdit()
    {
        if (!inEditMode)
        {
            originalModel.CopyFrom(Model);
        }

        inEditMode = !inEditMode;

        if (!inEditMode)
        {
            Model.CopyFrom(originalModel);

            // recreate edit context in order to clear any validation messages
            editContext = new EditContext(Model);
            messageStore = new ValidationMessageStore(editContext);
        }
    }

    protected override void OnInitialized()
    {
        Load();
    }
}