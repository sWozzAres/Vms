@inject HttpClient Http
@implements IAsyncDisposable
@typeparam TModel where TModel : new()

<section class="task-form">
    <h1>@Title</h1>
    <EditForm EditContext="editContext" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />

        @if (isLoaded)
        {
            if (lockFail)
            {
                <div class="error">
                    <p>Failed to lock the document.</p>
                </div>
            }
            else
            {
                @ChildContent
            }
        }
        <ValidationSummary />
        <div class="buttons">
            @if (errorMessage is not null)
            {
                <div class="error">
                    <p>@errorMessage</p>
                </div>
            }
            <button type="button" @onclick="() => OnCompleted.InvokeAsync(false)">Cancel</button>
            <button type="submit" disabled="@okDisabled">Ok</button>
        </div>

    </EditForm>
</section>

@code {
    [Parameter, EditorRequired] public string Title { get; set; } = null!;
    // public delegate Task<PostResponse> Save(TModel model);
    // [Parameter] public Save OnSave { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<bool> OnCompleted { get; set; }
    [Parameter, EditorRequired] public string Url { get; set; } = null!;
    [Parameter, EditorRequired] public Guid Id { get; set; }
    [Parameter, EditorRequired] public string Task { get; set; } = null!;

    public TModel Model = new();

    EditContext editContext = null!;
    ValidationMessageStore messageStore = null!;
    string? errorMessage;
    Guid? lockId;
    bool lockFail;
    bool isLoaded;
    bool okDisabled => !isLoaded || lockId is null;
    string lockUrl = null!;
    System.Threading.Timer? timer;

    async Task ValidSubmit()
    {
        errorMessage = null;

        var saveUrl = string.Join("/", Url, Id.ToString(), Task);

        Http.DefaultRequestHeaders.Accept.Clear();
        var result = PostResponse.Create(await Http.PostAsJsonAsync(saveUrl, Model));

        if (result is PostResponse.Success)
        {
            // TODO unlock the document in the server when the task is successfully saved to save this additional network call
            await Unlock(lockUrl, lockId!.Value);


            lockId = null;

            await OnCompleted.InvokeAsync(true);

        }
        else
        {
            messageStore.Clear();

            if (result is PostResponse.UnprocessableEntity ue)
            {
                foreach (var error in ue.ValidationErrors)
                {
                    messageStore.Add(editContext.Field(error.Key), error.Value);
                }
            }
            else
            {
                if (result is PostResponse.BadRequest br)
                {
                    messageStore.Add(editContext.Field(""), br.ErrorMessage);
                }
                else// if (result is PostResponse.Failure)
                {
                    messageStore.Add(editContext.Field(""), "There was a problem sending your request.");
                }
            }

            editContext.NotifyValidationStateChanged();
        }
    }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Url);
        if (Id == Guid.Empty) throw new ArgumentNullException(nameof(Id));
        ArgumentNullException.ThrowIfNull(Task);
        ArgumentNullException.ThrowIfNull(Title);
        ArgumentNullException.ThrowIfNull(ChildContent);
        if (!OnCompleted.HasDelegate) throw new ArgumentNullException(nameof(OnCompleted));

        editContext = new(Model!);
        messageStore = new(editContext);
    }

    protected override async Task OnInitializedAsync()
    {
        lockUrl = string.Join("/", Url, Id.ToString());
        try
        {
            lockId = await Lock(lockUrl);

            const int LockRefreshIntervalSeconds = 19;
            timer = new System.Threading.Timer(async (object? state) =>
            {
                await RefreshLock(lockUrl, lockId.Value);
            }, null, 0, LockRefreshIntervalSeconds * 1000);

        }
        catch
        {
            lockFail = true;
        }

        isLoaded = true;
    }

    public async Task<Guid> Lock(string url)
    {
        Http.DefaultRequestHeaders.Accept.Clear();
        var result = PostResponse.Create(await Http.PostAsJsonAsync($"{url}/lock", new { }));
        if (result is PostResponse.Success)
        {
            var dto = result.Response.Content.ReadFromJsonAsync<LockDto>().GetAwaiter().GetResult()
                ?? throw new InvalidOperationException("Failed to deserialize.");

            return dto.Id;
        }
        throw new InvalidOperationException("Failed to lock.");
    }
    public async Task<HttpResponseMessage> Unlock(string url, Guid lockId)
    {
        Http.DefaultRequestHeaders.Accept.Clear();
        return await Http.DeleteAsync($"{url}/lock/{lockId}");
    }
    public async Task<PostResponse> RefreshLock(string url, Guid lockId)
    {
        Http.DefaultRequestHeaders.Accept.Clear();
        return PostResponse.Create(await Http.PostAsJsonAsync($"{url}/lock/{lockId}/refresh", new { }));
    }

    public async ValueTask DisposeAsync()
    {
        if (lockId.HasValue)
        {
            await Unlock(lockUrl, lockId.Value);
        }

        if (timer is not null)
        {
            await timer.DisposeAsync();
        }
    }
}
